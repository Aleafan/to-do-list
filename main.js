(()=>{"use strict";var e={895:()=>{"function"!=typeof Object.assign&&(Object.assign=function(e,...t){if(!e)throw TypeError("Cannot convert undefined or null to object");for(const n of t)n&&Object.keys(n).forEach((t=>e[t]=n[t]));return e})}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,n),i.exports}(()=>{function e(e,t){const n=document.createElement(e);return Object.keys(t).forEach((e=>{n.setAttribute(e,t[e])})),n}function t(t){const n=document.querySelector("main");n&&n.remove();const a=document.querySelector(".fp-container");a&&a.remove(),document.body.appendChild(e("div",{class:"fp-container"})),document.body.appendChild(t()),document.body.classList.remove("nav-positioner"),window.scroll(0,0)}function a(e){e.focus();const{value:t}=e;e.value="",e.value=t}function r(e,t){const n=t||document.querySelector("progress");if(!n)return;const a=e.calcProgress();n.setAttribute("value",a),n.textContent=`${a} %`}function i(e){const t=document.querySelector(".active-tab");t&&t.classList.remove("active-tab"),e.classList.add("active-tab")}function o(e){document.getElementById("nav-menu").querySelector(`#${e.id} .task-number`).textContent=e.calcActiveTasks()}function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function c(e){s(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function d(e){s(1,arguments);var t=c(e);return!isNaN(t)}var l={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function u(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}var f,p={date:u({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:u({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:u({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},m={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function h(e){return function(t,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=r.width?String(r.width):i;a=e.formattingValues[o]||e.formattingValues[i]}else{var s=e.defaultWidth,c=r.width?String(r.width):e.defaultWidth;a=e.values[c]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function g(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var o,s=i[0],c=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?w(c,(function(e){return e.test(s)})):y(c,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(d):d,o=n.valueCallback?n.valueCallback(o):o;var l=t.slice(s.length);return{value:o,rest:l}}}function y(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function w(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const b={code:"en-US",formatDistance:function(e,t,n){var a;return n=n||{},a="string"==typeof l[e]?l[e]:1===t?l[e].one:l[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:p,formatRelative:function(e,t,n,a){return m[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:h({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:h({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:h({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:h({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:h({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(f={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(f.matchPattern);if(!n)return null;var a=n[0],r=e.match(f.parsePattern);if(!r)return null;var i=f.valueCallback?f.valueCallback(r[0]):r[0];i=t.valueCallback?t.valueCallback(i):i;var o=e.slice(a.length);return{value:i,rest:o}}),era:g({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:g({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:g({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:g({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:g({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function v(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function C(e,t){s(2,arguments);var n=c(e).getTime(),a=v(t);return new Date(n+a)}function D(e,t){s(2,arguments);var n=v(t);return C(e,-n)}function k(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const M=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return k("yy"===t?a%100:a,t.length)},T=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):k(n+1,2)},x=function(e,t){return k(e.getUTCDate(),t.length)},E=function(e,t){return k(e.getUTCHours()%12||12,t.length)},S=function(e,t){return k(e.getUTCHours(),t.length)},P=function(e,t){return k(e.getUTCMinutes(),t.length)},L=function(e,t){return k(e.getUTCSeconds(),t.length)},N=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return k(Math.floor(a*Math.pow(10,n-3)),t.length)};var O=864e5;function j(e){s(1,arguments);var t=1,n=c(e),a=n.getUTCDay(),r=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function Y(e){s(1,arguments);var t=c(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=j(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=j(i);return t.getTime()>=r.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}function I(e){s(1,arguments);var t=Y(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var a=j(n);return a}var q=6048e5;function F(e){s(1,arguments);var t=c(e),n=j(t).getTime()-I(t).getTime();return Math.round(n/q)+1}function U(e,t){s(1,arguments);var n=t||{},a=n.locale,r=a&&a.options&&a.options.weekStartsOn,i=null==r?0:v(r),o=null==n.weekStartsOn?i:v(n.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=c(e),l=d.getUTCDay(),u=(l<o?7:0)+l-o;return d.setUTCDate(d.getUTCDate()-u),d.setUTCHours(0,0,0,0),d}function H(e,t){s(1,arguments);var n=c(e,t),a=n.getUTCFullYear(),r=t||{},i=r.locale,o=i&&i.options&&i.options.firstWeekContainsDate,d=null==o?1:v(o),l=null==r.firstWeekContainsDate?d:v(r.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(a+1,0,l),u.setUTCHours(0,0,0,0);var f=U(u,t),p=new Date(0);p.setUTCFullYear(a,0,l),p.setUTCHours(0,0,0,0);var m=U(p,t);return n.getTime()>=f.getTime()?a+1:n.getTime()>=m.getTime()?a:a-1}function A(e,t){s(1,arguments);var n=t||{},a=n.locale,r=a&&a.options&&a.options.firstWeekContainsDate,i=null==r?1:v(r),o=null==n.firstWeekContainsDate?i:v(n.firstWeekContainsDate),c=H(e,t),d=new Date(0);d.setUTCFullYear(c,0,o),d.setUTCHours(0,0,0,0);var l=U(d,t);return l}var _=6048e5;function W(e,t){s(1,arguments);var n=c(e),a=U(n,t).getTime()-A(n,t).getTime();return Math.round(a/_)+1}function R(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+k(i,2)}function B(e,t){return e%60==0?(e>0?"-":"+")+k(Math.abs(e)/60,2):Q(e,t)}function Q(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+k(Math.floor(r/60),2)+n+k(r%60,2)}const G={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});case"GGGG":default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return M(e,t)},Y:function(e,t,n,a){var r=H(e,a),i=r>0?r:1-r;return"YY"===t?k(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):k(i,t.length)},R:function(e,t){return k(Y(e),t.length)},u:function(e,t){return k(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return k(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return k(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return T(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return k(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var r=W(e,a);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):k(r,t.length)},I:function(e,t,n){var a=F(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):k(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):x(e,t)},D:function(e,t,n){var a=function(e){s(1,arguments);var t=c(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),r=n-a;return Math.floor(r/O)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):k(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});case"EEEE":default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return k(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});case"eeee":default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return k(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});case"cccc":default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return k(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});case"iiii":default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return E(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):S(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):k(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):k(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):P(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):L(e,t)},S:function(e,t){return N(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return B(r);case"XXXX":case"XX":return Q(r);case"XXXXX":case"XXX":default:return Q(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return B(r);case"xxxx":case"xx":return Q(r);case"xxxxx":case"xxx":default:return Q(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+R(r,":");case"OOOO":default:return"GMT"+Q(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+R(r,":");case"zzzz":default:return"GMT"+Q(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return k(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return k((a._originalDate||e).getTime(),t.length)}};function X(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function $(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const z={p:$,P:function(e,t){var n,a=e.match(/(P+)(p+)?/),r=a[1],i=a[2];if(!i)return X(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",X(r,t)).replace("{{time}}",$(i,t))}};function K(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var J=["D","DD"],Z=["YY","YYYY"];function V(e){return-1!==J.indexOf(e)}function ee(e){return-1!==Z.indexOf(e)}function te(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ne=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ae=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,re=/^'([^]*?)'?$/,ie=/''/g,oe=/[a-zA-Z]/;function se(e,t,n){s(2,arguments);var a=String(t),r=n||{},i=r.locale||b,o=i.options&&i.options.firstWeekContainsDate,l=null==o?1:v(o),u=null==r.firstWeekContainsDate?l:v(r.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=i.options&&i.options.weekStartsOn,p=null==f?0:v(f),m=null==r.weekStartsOn?p:v(r.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var h=c(e);if(!d(h))throw new RangeError("Invalid time value");var g=K(h),y=D(h,g),w={firstWeekContainsDate:u,weekStartsOn:m,locale:i,_originalDate:h},C=a.match(ae).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,z[t])(e,i.formatLong,w):e})).join("").match(ne).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return ce(n);var o=G[a];if(o)return!r.useAdditionalWeekYearTokens&&ee(n)&&te(n,t,e),!r.useAdditionalDayOfYearTokens&&V(n)&&te(n,t,e),o(y,n,i.localize,w);if(a.match(oe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("");return C}function ce(e){return e.match(re)[1].replace(ie,"'")}function de(e,t){s(2,arguments);var n=c(e),a=v(t);return isNaN(a)?new Date(NaN):a?(n.setDate(n.getDate()+a),n):n}function le(e,t){s(2,arguments);var n=c(e),a=v(t);if(isNaN(a))return new Date(NaN);if(!a)return n;var r=n.getDate(),i=new Date(n.getTime());i.setMonth(n.getMonth()+a+1,0);var o=i.getDate();return r>=o?i:(n.setFullYear(i.getFullYear(),i.getMonth(),r),n)}function ue(e,t){if(s(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var n=t.years?v(t.years):0,a=t.months?v(t.months):0,r=t.weeks?v(t.weeks):0,i=t.days?v(t.days):0,o=t.hours?v(t.hours):0,d=t.minutes?v(t.minutes):0,l=t.seconds?v(t.seconds):0,u=c(e),f=a||n?le(u,a+12*n):u,p=i||r?de(f,i+7*r):f,m=d+60*o,h=l+60*m,g=1e3*h,y=new Date(p.getTime()+g);return y}function fe(e,t){s(2,arguments);var n=v(t);return de(e,-n)}function pe(e,t){s(2,arguments);var n=v(t);return le(e,-n)}function me(e,t){if(s(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var n=t.years?v(t.years):0,a=t.months?v(t.months):0,r=t.weeks?v(t.weeks):0,i=t.days?v(t.days):0,o=t.hours?v(t.hours):0,d=t.minutes?v(t.minutes):0,l=t.seconds?v(t.seconds):0,u=pe(c(e),a+12*n),f=fe(u,i+7*r),p=d+60*o,m=l+60*p,h=1e3*m,g=new Date(f.getTime()-h);return g}function he(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function ge(e,t,n){s(2,arguments);var a=n||{},r=a.locale,i=r&&r.options&&r.options.weekStartsOn,o=null==i?0:v(i),d=null==a.weekStartsOn?o:v(a.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=c(e),u=v(t),f=l.getUTCDay(),p=u%7,m=(p+7)%7,h=(m<d?7:0)+u-f;return l.setUTCDate(l.getUTCDate()+h),l}var ye=/^(1[0-2]|0?\d)/,we=/^(3[0-1]|[0-2]?\d)/,be=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,ve=/^(5[0-3]|[0-4]?\d)/,Ce=/^(2[0-3]|[0-1]?\d)/,De=/^(2[0-4]|[0-1]?\d)/,ke=/^(1[0-1]|0?\d)/,Me=/^(1[0-2]|0?\d)/,Te=/^[0-5]?\d/,xe=/^[0-5]?\d/,Ee=/^\d/,Se=/^\d{1,2}/,Pe=/^\d{1,3}/,Le=/^\d{1,4}/,Ne=/^-?\d+/,Oe=/^-?\d/,je=/^-?\d{1,2}/,Ye=/^-?\d{1,3}/,Ie=/^-?\d{1,4}/,qe=/^([+-])(\d{2})(\d{2})?|Z/,Fe=/^([+-])(\d{2})(\d{2})|Z/,Ue=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,He=/^([+-])(\d{2}):(\d{2})|Z/,Ae=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function _e(e,t,n){var a=t.match(e);if(!a)return null;var r=parseInt(a[0],10);return{value:n?n(r):r,rest:t.slice(a[0].length)}}function We(e,t){var n=t.match(e);return n?"Z"===n[0]?{value:0,rest:t.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:t.slice(n[0].length)}:null}function Re(e,t){return _e(Ne,e,t)}function Be(e,t,n){switch(e){case 1:return _e(Ee,t,n);case 2:return _e(Se,t,n);case 3:return _e(Pe,t,n);case 4:return _e(Le,t,n);default:return _e(new RegExp("^\\d{1,"+e+"}"),t,n)}}function Qe(e,t,n){switch(e){case 1:return _e(Oe,t,n);case 2:return _e(je,t,n);case 3:return _e(Ye,t,n);case 4:return _e(Ie,t,n);default:return _e(new RegExp("^-?\\d{1,"+e+"}"),t,n)}}function Ge(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;case"am":case"midnight":case"night":default:return 0}}function Xe(e,t){var n,a=t>0,r=a?t:1-t;if(r<=50)n=e||100;else{var i=r+50;n=e+100*Math.floor(i/100)-(e>=i%100?100:0)}return a?n:1-n}var $e=[31,28,31,30,31,30,31,31,30,31,30,31],ze=[31,29,31,30,31,30,31,31,30,31,30,31];function Ke(e){return e%400==0||e%4==0&&e%100!=0}const Je={G:{priority:140,parse:function(e,t,n,a){switch(t){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"});case"GGGGG":return n.era(e,{width:"narrow"});case"GGGG":default:return n.era(e,{width:"wide"})||n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"})}},set:function(e,t,n,a){return t.era=n,e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["R","u","t","T"]},y:{priority:130,parse:function(e,t,n,a){var r=function(e){return{year:e,isTwoDigitYear:"yy"===t}};switch(t){case"y":return Be(4,e,r);case"yo":return n.ordinalNumber(e,{unit:"year",valueCallback:r});default:return Be(t.length,e,r)}},validate:function(e,t,n){return t.isTwoDigitYear||t.year>0},set:function(e,t,n,a){var r=e.getUTCFullYear();if(n.isTwoDigitYear){var i=Xe(n.year,r);return e.setUTCFullYear(i,0,1),e.setUTCHours(0,0,0,0),e}var o="era"in t&&1!==t.era?1-n.year:n.year;return e.setUTCFullYear(o,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","u","w","I","i","e","c","t","T"]},Y:{priority:130,parse:function(e,t,n,a){var r=function(e){return{year:e,isTwoDigitYear:"YY"===t}};switch(t){case"Y":return Be(4,e,r);case"Yo":return n.ordinalNumber(e,{unit:"year",valueCallback:r});default:return Be(t.length,e,r)}},validate:function(e,t,n){return t.isTwoDigitYear||t.year>0},set:function(e,t,n,a){var r=H(e,a);if(n.isTwoDigitYear){var i=Xe(n.year,r);return e.setUTCFullYear(i,0,a.firstWeekContainsDate),e.setUTCHours(0,0,0,0),U(e,a)}var o="era"in t&&1!==t.era?1-n.year:n.year;return e.setUTCFullYear(o,0,a.firstWeekContainsDate),e.setUTCHours(0,0,0,0),U(e,a)},incompatibleTokens:["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:{priority:130,parse:function(e,t,n,a){return Qe("R"===t?4:t.length,e)},set:function(e,t,n,a){var r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),j(r)},incompatibleTokens:["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:{priority:130,parse:function(e,t,n,a){return Qe("u"===t?4:t.length,e)},set:function(e,t,n,a){return e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["G","y","Y","R","w","I","i","e","c","t","T"]},Q:{priority:120,parse:function(e,t,n,a){switch(t){case"Q":case"QQ":return Be(t.length,e);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(e,{width:"wide",context:"formatting"})||n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=1&&t<=4},set:function(e,t,n,a){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:{priority:120,parse:function(e,t,n,a){switch(t){case"q":case"qq":return Be(t.length,e);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(e,{width:"wide",context:"standalone"})||n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=1&&t<=4},set:function(e,t,n,a){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:{priority:110,parse:function(e,t,n,a){var r=function(e){return e-1};switch(t){case"M":return _e(ye,e,r);case"MM":return Be(2,e,r);case"Mo":return n.ordinalNumber(e,{unit:"month",valueCallback:r});case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(e,{width:"wide",context:"formatting"})||n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,a){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]},L:{priority:110,parse:function(e,t,n,a){var r=function(e){return e-1};switch(t){case"L":return _e(ye,e,r);case"LL":return Be(2,e,r);case"Lo":return n.ordinalNumber(e,{unit:"month",valueCallback:r});case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(e,{width:"wide",context:"standalone"})||n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,a){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:{priority:100,parse:function(e,t,n,a){switch(t){case"w":return _e(ve,e);case"wo":return n.ordinalNumber(e,{unit:"week"});default:return Be(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=53},set:function(e,t,n,a){return U(function(e,t,n){s(2,arguments);var a=c(e),r=v(t),i=W(a,n)-r;return a.setUTCDate(a.getUTCDate()-7*i),a}(e,n,a),a)},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:{priority:100,parse:function(e,t,n,a){switch(t){case"I":return _e(ve,e);case"Io":return n.ordinalNumber(e,{unit:"week"});default:return Be(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=53},set:function(e,t,n,a){return j(function(e,t){s(2,arguments);var n=c(e),a=v(t),r=F(n)-a;return n.setUTCDate(n.getUTCDate()-7*r),n}(e,n,a),a)},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:{priority:90,subPriority:1,parse:function(e,t,n,a){switch(t){case"d":return _e(we,e);case"do":return n.ordinalNumber(e,{unit:"date"});default:return Be(t.length,e)}},validate:function(e,t,n){var a=Ke(e.getUTCFullYear()),r=e.getUTCMonth();return a?t>=1&&t<=ze[r]:t>=1&&t<=$e[r]},set:function(e,t,n,a){return e.setUTCDate(n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:{priority:90,subPriority:1,parse:function(e,t,n,a){switch(t){case"D":case"DD":return _e(be,e);case"Do":return n.ordinalNumber(e,{unit:"date"});default:return Be(t.length,e)}},validate:function(e,t,n){return Ke(e.getUTCFullYear())?t>=1&&t<=366:t>=1&&t<=365},set:function(e,t,n,a){return e.setUTCMonth(0,n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:{priority:90,parse:function(e,t,n,a){switch(t){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEE":default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,a){return(e=ge(e,n,a)).setUTCHours(0,0,0,0),e},incompatibleTokens:["D","i","e","c","t","T"]},e:{priority:90,parse:function(e,t,n,a){var r=function(e){var t=7*Math.floor((e-1)/7);return(e+a.weekStartsOn+6)%7+t};switch(t){case"e":case"ee":return Be(t.length,e,r);case"eo":return n.ordinalNumber(e,{unit:"day",valueCallback:r});case"eee":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeeee":return n.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeee":default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,a){return(e=ge(e,n,a)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:{priority:90,parse:function(e,t,n,a){var r=function(e){var t=7*Math.floor((e-1)/7);return(e+a.weekStartsOn+6)%7+t};switch(t){case"c":case"cc":return Be(t.length,e,r);case"co":return n.ordinalNumber(e,{unit:"day",valueCallback:r});case"ccc":return n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"ccccc":return n.day(e,{width:"narrow",context:"standalone"});case"cccccc":return n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"cccc":default:return n.day(e,{width:"wide",context:"standalone"})||n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,a){return(e=ge(e,n,a)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:{priority:90,parse:function(e,t,n,a){var r=function(e){return 0===e?7:e};switch(t){case"i":case"ii":return Be(t.length,e);case"io":return n.ordinalNumber(e,{unit:"day"});case"iii":return n.day(e,{width:"abbreviated",context:"formatting",valueCallback:r})||n.day(e,{width:"short",context:"formatting",valueCallback:r})||n.day(e,{width:"narrow",context:"formatting",valueCallback:r});case"iiiii":return n.day(e,{width:"narrow",context:"formatting",valueCallback:r});case"iiiiii":return n.day(e,{width:"short",context:"formatting",valueCallback:r})||n.day(e,{width:"narrow",context:"formatting",valueCallback:r});case"iiii":default:return n.day(e,{width:"wide",context:"formatting",valueCallback:r})||n.day(e,{width:"abbreviated",context:"formatting",valueCallback:r})||n.day(e,{width:"short",context:"formatting",valueCallback:r})||n.day(e,{width:"narrow",context:"formatting",valueCallback:r})}},validate:function(e,t,n){return t>=1&&t<=7},set:function(e,t,n,a){return(e=function(e,t){s(2,arguments);var n=v(t);n%7==0&&(n-=7);var a=1,r=c(e),i=r.getUTCDay(),o=((n%7+7)%7<a?7:0)+n-i;return r.setUTCDate(r.getUTCDate()+o),r}(e,n,a)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:{priority:80,parse:function(e,t,n,a){switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,a){return e.setUTCHours(Ge(n),0,0,0),e},incompatibleTokens:["b","B","H","K","k","t","T"]},b:{priority:80,parse:function(e,t,n,a){switch(t){case"b":case"bb":case"bbb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,a){return e.setUTCHours(Ge(n),0,0,0),e},incompatibleTokens:["a","B","H","K","k","t","T"]},B:{priority:80,parse:function(e,t,n,a){switch(t){case"B":case"BB":case"BBB":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,a){return e.setUTCHours(Ge(n),0,0,0),e},incompatibleTokens:["a","b","t","T"]},h:{priority:70,parse:function(e,t,n,a){switch(t){case"h":return _e(Me,e);case"ho":return n.ordinalNumber(e,{unit:"hour"});default:return Be(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=12},set:function(e,t,n,a){var r=e.getUTCHours()>=12;return r&&n<12?e.setUTCHours(n+12,0,0,0):r||12!==n?e.setUTCHours(n,0,0,0):e.setUTCHours(0,0,0,0),e},incompatibleTokens:["H","K","k","t","T"]},H:{priority:70,parse:function(e,t,n,a){switch(t){case"H":return _e(Ce,e);case"Ho":return n.ordinalNumber(e,{unit:"hour"});default:return Be(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=23},set:function(e,t,n,a){return e.setUTCHours(n,0,0,0),e},incompatibleTokens:["a","b","h","K","k","t","T"]},K:{priority:70,parse:function(e,t,n,a){switch(t){case"K":return _e(ke,e);case"Ko":return n.ordinalNumber(e,{unit:"hour"});default:return Be(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,a){return e.getUTCHours()>=12&&n<12?e.setUTCHours(n+12,0,0,0):e.setUTCHours(n,0,0,0),e},incompatibleTokens:["a","b","h","H","k","t","T"]},k:{priority:70,parse:function(e,t,n,a){switch(t){case"k":return _e(De,e);case"ko":return n.ordinalNumber(e,{unit:"hour"});default:return Be(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=24},set:function(e,t,n,a){var r=n<=24?n%24:n;return e.setUTCHours(r,0,0,0),e},incompatibleTokens:["a","b","h","H","K","t","T"]},m:{priority:60,parse:function(e,t,n,a){switch(t){case"m":return _e(Te,e);case"mo":return n.ordinalNumber(e,{unit:"minute"});default:return Be(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=59},set:function(e,t,n,a){return e.setUTCMinutes(n,0,0),e},incompatibleTokens:["t","T"]},s:{priority:50,parse:function(e,t,n,a){switch(t){case"s":return _e(xe,e);case"so":return n.ordinalNumber(e,{unit:"second"});default:return Be(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=59},set:function(e,t,n,a){return e.setUTCSeconds(n,0),e},incompatibleTokens:["t","T"]},S:{priority:30,parse:function(e,t,n,a){return Be(t.length,e,(function(e){return Math.floor(e*Math.pow(10,3-t.length))}))},set:function(e,t,n,a){return e.setUTCMilliseconds(n),e},incompatibleTokens:["t","T"]},X:{priority:10,parse:function(e,t,n,a){switch(t){case"X":return We(qe,e);case"XX":return We(Fe,e);case"XXXX":return We(Ue,e);case"XXXXX":return We(Ae,e);case"XXX":default:return We(He,e)}},set:function(e,t,n,a){return t.timestampIsSet?e:new Date(e.getTime()-n)},incompatibleTokens:["t","T","x"]},x:{priority:10,parse:function(e,t,n,a){switch(t){case"x":return We(qe,e);case"xx":return We(Fe,e);case"xxxx":return We(Ue,e);case"xxxxx":return We(Ae,e);case"xxx":default:return We(He,e)}},set:function(e,t,n,a){return t.timestampIsSet?e:new Date(e.getTime()-n)},incompatibleTokens:["t","T","X"]},t:{priority:40,parse:function(e,t,n,a){return Re(e)},set:function(e,t,n,a){return[new Date(1e3*n),{timestampIsSet:!0}]},incompatibleTokens:"*"},T:{priority:20,parse:function(e,t,n,a){return Re(e)},set:function(e,t,n,a){return[new Date(n),{timestampIsSet:!0}]},incompatibleTokens:"*"}};var Ze=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ve=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,et=/^'([^]*?)'?$/,tt=/''/g,nt=/\S/,at=/[a-zA-Z]/;function rt(e,t,n,a){s(3,arguments);var r=String(e),i=String(t),o=a||{},d=o.locale||b;if(!d.match)throw new RangeError("locale must contain match property");var l=d.options&&d.options.firstWeekContainsDate,u=null==l?1:v(l),f=null==o.firstWeekContainsDate?u:v(o.firstWeekContainsDate);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=d.options&&d.options.weekStartsOn,m=null==p?0:v(p),h=null==o.weekStartsOn?m:v(o.weekStartsOn);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===i)return""===r?c(n):new Date(NaN);var g,y={firstWeekContainsDate:f,weekStartsOn:h,locale:d},w=[{priority:10,subPriority:-1,set:it,index:0}],C=i.match(Ve).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,z[t])(e,d.formatLong,y):e})).join("").match(Ze),k=[];for(g=0;g<C.length;g++){var M=C[g];!o.useAdditionalWeekYearTokens&&ee(M)&&te(M,i,e),!o.useAdditionalDayOfYearTokens&&V(M)&&te(M,i,e);var T=M[0],x=Je[T];if(x){var E=x.incompatibleTokens;if(Array.isArray(E)){for(var S=void 0,P=0;P<k.length;P++){var L=k[P].token;if(-1!==E.indexOf(L)||L===T){S=k[P];break}}if(S)throw new RangeError("The format string mustn't contain `".concat(S.fullToken,"` and `").concat(M,"` at the same time"))}else if("*"===x.incompatibleTokens&&k.length)throw new RangeError("The format string mustn't contain `".concat(M,"` and any other token at the same time"));k.push({token:T,fullToken:M});var N=x.parse(r,M,d.match,y);if(!N)return new Date(NaN);w.push({priority:x.priority,subPriority:x.subPriority||0,set:x.set,validate:x.validate,value:N.value,index:w.length}),r=N.rest}else{if(T.match(at))throw new RangeError("Format string contains an unescaped latin alphabet character `"+T+"`");if("''"===M?M="'":"'"===T&&(M=ot(M)),0!==r.indexOf(M))return new Date(NaN);r=r.slice(M.length)}}if(r.length>0&&nt.test(r))return new Date(NaN);var O=w.map((function(e){return e.priority})).sort((function(e,t){return t-e})).filter((function(e,t,n){return n.indexOf(e)===t})).map((function(e){return w.filter((function(t){return t.priority===e})).sort((function(e,t){return t.subPriority-e.subPriority}))})).map((function(e){return e[0]})),j=c(n);if(isNaN(j))return new Date(NaN);var Y=D(j,K(j)),I={};for(g=0;g<O.length;g++){var q=O[g];if(q.validate&&!q.validate(Y,q.value,y))return new Date(NaN);var F=q.set(Y,I,q.value,y);F[0]?(Y=F[0],he(I,F[1])):Y=F}return Y}function it(e,t){if(t.timestampIsSet)return e;var n=new Date(0);return n.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),n.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),n}function ot(e){return e.match(et)[1].replace(tt,"'")}function st(e){s(1,arguments);var t=c(e);return t.setHours(0,0,0,0),t}function ct(e,t){s(2,arguments);var n=st(e),a=st(t);return n.getTime()===a.getTime()}function dt(e){return s(1,arguments),ct(e,Date.now())}function lt(e){return s(1,arguments),ct(e,de(Date.now(),1))}function ut(e,t){s(2,arguments);var n=c(e),a=c(t);return n.getFullYear()===a.getFullYear()}function ft(e){return s(1,arguments),ut(e,Date.now())}function pt(e){const t=rt(e,"MMM d yyyy",new Date),n=function(e){return s(1,arguments),c(e).getTime()<Date.now()}(t);return{date:dt(t)?"Today":lt(t)?"Tomor.":ft(t)?se(t,"MMM d"):e,expired:n}}function mt(e){return dt(rt(e,"MMM d yyyy",new Date))}function ht(e){return function(e){return s(1,arguments),c(e).getTime()>Date.now()}(rt(e,"MMM d yyyy",new Date))}const gt=Date.now(),yt=se(gt,"MMM d yyyy"),wt={id:"inbox",title:"Inbox",description:"",tasks:[{title:"Finish work on project",notes:"",dueDate:yt,priority:!1,complete:!1},{title:"Read weekly news",dueDate:se(ue(gt,{months:1}),"MMM d yyyy"),priority:!1,complete:!0},{title:"Repair the bicycle",notes:"Buy a spanner size 12",dueDate:se(ue(gt,{days:15}),"MMM d yyyy"),priority:!1,complete:!1}]},bt={id:"a94hngh656",title:"Vacation in Italy",description:"We'll go next month and visit Rome, Siena and Florence",tasks:[{title:"Book flight tickets",notes:"Flight during the day",dueDate:yt,priority:!1,complete:!1},{title:"Read about the metro",notes:"Tickets, prices, opening times",dueDate:se(ue(gt,{days:5}),"MMM d yyyy"),priority:!1,complete:!1},{title:"Buy travel guide",notes:"Rough Guide is preferred",dueDate:se(me(gt,{days:3}),"MMM d yyyy"),priority:!1,complete:!0},{title:"Book hotel room",notes:"",dueDate:"",priority:!0,complete:!1}]},vt={id:"acurlpj9pg",title:"Exercise",description:"Physical exercise is important for general well-being",tasks:[{title:"Practice yoga",notes:"Practice yoga 3 times per week",dueDate:se(ue(gt,{days:1}),"MMM d yyyy"),priority:!0,complete:!1},{title:"Exercise on the bar",notes:"",dueDate:yt,priority:!1,complete:!0},{title:"Do back exercises",notes:"",dueDate:se(ue(gt,{days:3}),"MMM d yyyy"),priority:!1,complete:!1}]},Ct={id:"a9yorb54d2",title:"House",description:"Keep the house tidy",tasks:[{title:"Clean the house",notes:"Once per week",dueDate:se(me(gt,{days:3}),"MMM d yyyy"),priority:!1,complete:!1},{title:"Repair broken tap",notes:"",dueDate:"",priority:!1,complete:!1}]},Dt={addTask(e){this.tasks.push(e)},deleteTask(e){this.tasks.splice(this.tasks.indexOf(e),1)},calcProgress(){const e=this.tasks.length;if(0===e)return 0;let t=0;return this.tasks.forEach((e=>{e.complete&&t++})),Math.round(t/e*100)},calcActiveTasks(){return this.tasks.filter((e=>!e.complete)).length||""},deleteCompleted(){this.tasks=this.tasks.filter((e=>!e.complete))}},kt={addProject(e){this.list.push(e)},deleteProject(e){this.list.splice(this.list.indexOf(e),1)},findTodayTasks(){return{id:"today",tasks:this.list.reduce(((e,t)=>(t.tasks.forEach((n=>{mt(n.dueDate)&&e.push({id:t.id,task:n})})),e)),[]),calcProgress(){const e=this.tasks.length;if(0===e)return 0;let t=0;return this.tasks.forEach((e=>{e.task.complete&&t++})),Math.round(t/e*100)},calcActiveTasks(){return this.tasks.filter((e=>!e.task.complete)).length||""}}},findUpcomingTasks(){return this.list.reduce(((e,t)=>(t.tasks.forEach((n=>{if(n.dueDate&&ht(n.dueDate)){const a={id:t.id,task:n},r=e.find((e=>e.date===n.dueDate));if(r)r.tasks.push(a);else{const t={date:n.dueDate,tasks:[a]};e.push(t)}}})),e)),[]).sort(((e,t)=>{return n=e.date,a=t.date,function(e,t){s(2,arguments);var n=c(e),a=c(t);return n.getTime()>a.getTime()}(rt(n,"MMM d yyyy",new Date),rt(a,"MMM d yyyy",new Date))?1:-1;var n,a}))}};let Mt;const Tt=[wt,bt,vt,Ct,{id:"ayl9h1qd67",title:"Grocery list",description:"",tasks:[{title:"Buy milk",notes:"Sale in Diksy - 95% off!",dueDate:yt,priority:!1,complete:!1},{title:"Buy sugar",notes:"Super cheap in Pyaterochka",dueDate:yt,priority:!1,complete:!1},{title:"Buy beer",notes:"As much as possible...",dueDate:"",priority:!1,complete:!0}]}],xt=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange","onPreCalendarPosition"],Et={_disable:[],allowInput:!1,allowInvalidPreload:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",autoFillDefaultTime:!0,clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enableSeconds:!1,enableTime:!1,errorHandler:e=>"undefined"!=typeof console&&console.warn(e),getWeek:e=>{const t=new Date(e.getTime());t.setHours(0,0,0,0),t.setDate(t.getDate()+3-(t.getDay()+6)%7);var n=new Date(t.getFullYear(),0,4);return 1+Math.round(((t.getTime()-n.getTime())/864e5-3+(n.getDay()+6)%7)/7)},hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",monthSelectorType:"dropdown",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,now:new Date,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],onPreCalendarPosition:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,showMonths:1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},St={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:e=>{const t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"],yearAriaLabel:"Year",monthAriaLabel:"Month",hourAriaLabel:"Hour",minuteAriaLabel:"Minute",time_24hr:!1},Pt=St,Lt=(e,t=2)=>`000${e}`.slice(-1*t),Nt=e=>!0===e?1:0;function Ot(e,t){let n;return function(){clearTimeout(n),n=setTimeout((()=>e.apply(this,arguments)),t)}}const jt=e=>e instanceof Array?e:[e];function Yt(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function It(e,t,n){const a=window.document.createElement(e);return t=t||"",n=n||"",a.className=t,void 0!==n&&(a.textContent=n),a}function qt(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function Ft(e,t){return t(e)?e:e.parentNode?Ft(e.parentNode,t):void 0}function Ut(e,t){const n=It("div","numInputWrapper"),a=It("input","numInput "+e),r=It("span","arrowUp"),i=It("span","arrowDown");if(-1===navigator.userAgent.indexOf("MSIE 9.0")?a.type="number":(a.type="text",a.pattern="\\d*"),void 0!==t)for(const e in t)a.setAttribute(e,t[e]);return n.appendChild(a),n.appendChild(r),n.appendChild(i),n}function Ht(e){try{return"function"==typeof e.composedPath?e.composedPath()[0]:e.target}catch(t){return e.target}}const At=()=>{},_t=(e,t,n)=>n.months[t?"shorthand":"longhand"][e],Wt={D:At,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:(e,t)=>{e.setHours(parseFloat(t))},H:(e,t)=>{e.setHours(parseFloat(t))},J:(e,t)=>{e.setDate(parseFloat(t))},K:(e,t,n)=>{e.setHours(e.getHours()%12+12*Nt(new RegExp(n.amPM[1],"i").test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:(e,t)=>{e.setSeconds(parseFloat(t))},U:(e,t)=>new Date(1e3*parseFloat(t)),W:function(e,t,n){const a=parseInt(t),r=new Date(e.getFullYear(),0,2+7*(a-1),0,0,0,0);return r.setDate(r.getDate()-r.getDay()+n.firstDayOfWeek),r},Y:(e,t)=>{e.setFullYear(parseFloat(t))},Z:(e,t)=>new Date(t),d:(e,t)=>{e.setDate(parseFloat(t))},h:(e,t)=>{e.setHours(parseFloat(t))},i:(e,t)=>{e.setMinutes(parseFloat(t))},j:(e,t)=>{e.setDate(parseFloat(t))},l:At,m:(e,t)=>{e.setMonth(parseFloat(t)-1)},n:(e,t)=>{e.setMonth(parseFloat(t)-1)},s:(e,t)=>{e.setSeconds(parseFloat(t))},u:(e,t)=>new Date(parseFloat(t)),w:At,y:(e,t)=>{e.setFullYear(2e3+parseFloat(t))}},Rt={D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",u:"(.+)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},Bt={Z:e=>e.toISOString(),D:function(e,t,n){return t.weekdays.shorthand[Bt.w(e,t,n)]},F:function(e,t,n){return _t(Bt.n(e,t,n)-1,!1,t)},G:function(e,t,n){return Lt(Bt.h(e,t,n))},H:e=>Lt(e.getHours()),J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:(e,t)=>t.amPM[Nt(e.getHours()>11)],M:function(e,t){return _t(e.getMonth(),!0,t)},S:e=>Lt(e.getSeconds()),U:e=>e.getTime()/1e3,W:function(e,t,n){return n.getWeek(e)},Y:e=>Lt(e.getFullYear(),4),d:e=>Lt(e.getDate()),h:e=>e.getHours()%12?e.getHours()%12:12,i:e=>Lt(e.getMinutes()),j:e=>e.getDate(),l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:e=>Lt(e.getMonth()+1),n:e=>e.getMonth()+1,s:e=>e.getSeconds(),u:e=>e.getTime(),w:e=>e.getDay(),y:e=>String(e.getFullYear()).substring(2)},Qt=({config:e=Et,l10n:t=St,isMobile:n=!1})=>(a,r,i)=>{const o=i||t;return void 0===e.formatDate||n?r.split("").map(((t,n,r)=>Bt[t]&&"\\"!==r[n-1]?Bt[t](a,o,e):"\\"!==t?t:"")).join(""):e.formatDate(a,r,o)},Gt=({config:e=Et,l10n:t=St})=>(n,a,r,i)=>{if(0!==n&&!n)return;const o=i||t;let s;const c=n;if(n instanceof Date)s=new Date(n.getTime());else if("string"!=typeof n&&void 0!==n.toFixed)s=new Date(n);else if("string"==typeof n){const t=a||(e||Et).dateFormat,i=String(n).trim();if("today"===i)s=new Date,r=!0;else if(/Z$/.test(i)||/GMT$/.test(i))s=new Date(n);else if(e&&e.parseDate)s=e.parseDate(n,t);else{s=e&&e.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0);let a,r=[];for(let e=0,i=0,c="";e<t.length;e++){const d=t[e],l="\\"===d,u="\\"===t[e-1]||l;if(Rt[d]&&!u){c+=Rt[d];const e=new RegExp(c).exec(n);e&&(a=!0)&&r["Y"!==d?"push":"unshift"]({fn:Wt[d],val:e[++i]})}else l||(c+=".");r.forEach((({fn:e,val:t})=>s=e(s,t,o)||s))}s=a?s:void 0}}if(s instanceof Date&&!isNaN(s.getTime()))return!0===r&&s.setHours(0,0,0,0),s;e.errorHandler(new Error(`Invalid date provided: ${c}`))};function Xt(e,t,n=!0){return!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}function $t(e){let t=e.defaultHour,n=e.defaultMinute,a=e.defaultSeconds;if(void 0!==e.minDate){const r=e.minDate.getHours(),i=e.minDate.getMinutes(),o=e.minDate.getSeconds();t<r&&(t=r),t===r&&n<i&&(n=i),t===r&&n===i&&a<o&&(a=e.minDate.getSeconds())}if(void 0!==e.maxDate){const r=e.maxDate.getHours(),i=e.maxDate.getMinutes();t=Math.min(t,r),t===r&&(n=Math.min(i,n)),t===r&&n===i&&(a=e.maxDate.getSeconds())}return{hours:t,minutes:n,seconds:a}}function zt(e,t){const n={config:Object.assign(Object.assign({},Et),Jt.defaultConfig),l10n:Pt};function a(e){return e.bind(n)}function r(){const e=n.config;!1===e.weekNumbers&&1===e.showMonths||!0!==e.noCalendar&&window.requestAnimationFrame((function(){if(void 0!==n.calendarContainer&&(n.calendarContainer.style.visibility="hidden",n.calendarContainer.style.display="block"),void 0!==n.daysContainer){const t=(n.days.offsetWidth+1)*e.showMonths;n.daysContainer.style.width=t+"px",n.calendarContainer.style.width=t+(void 0!==n.weekWrapper?n.weekWrapper.offsetWidth:0)+"px",n.calendarContainer.style.removeProperty("visibility"),n.calendarContainer.style.removeProperty("display")}}))}function i(e){if(0===n.selectedDates.length){const e=void 0===n.config.minDate||Xt(new Date,n.config.minDate)>=0?new Date:new Date(n.config.minDate.getTime()),t=$t(n.config);e.setHours(t.hours,t.minutes,t.seconds,e.getMilliseconds()),n.selectedDates=[e],n.latestSelectedDateObj=e}void 0!==e&&"blur"!==e.type&&function(e){e.preventDefault();const t="keydown"===e.type,a=Ht(e),r=a;void 0!==n.amPM&&a===n.amPM&&(n.amPM.textContent=n.l10n.amPM[Nt(n.amPM.textContent===n.l10n.amPM[0])]);const i=parseFloat(r.getAttribute("min")),o=parseFloat(r.getAttribute("max")),s=parseFloat(r.getAttribute("step")),c=parseInt(r.value,10);let d=c+s*(e.delta||(t?38===e.which?1:-1:0));if(void 0!==r.value&&2===r.value.length){const e=r===n.hourElement,t=r===n.minuteElement;d<i?(d=o+d+Nt(!e)+(Nt(e)&&Nt(!n.amPM)),t&&m(void 0,-1,n.hourElement)):d>o&&(d=r===n.hourElement?d-o-Nt(!n.amPM):i,t&&m(void 0,1,n.hourElement)),n.amPM&&e&&(1===s?d+c===23:Math.abs(d-c)>s)&&(n.amPM.textContent=n.l10n.amPM[Nt(n.amPM.textContent===n.l10n.amPM[0])]),r.value=Lt(d)}}(e);const t=n._input.value;o(),J(),n._input.value!==t&&n._debouncedChange()}function o(){if(void 0===n.hourElement||void 0===n.minuteElement)return;let e=(parseInt(n.hourElement.value.slice(-2),10)||0)%24,t=(parseInt(n.minuteElement.value,10)||0)%60,a=void 0!==n.secondElement?(parseInt(n.secondElement.value,10)||0)%60:0;var r,i;void 0!==n.amPM&&(r=e,i=n.amPM.textContent,e=r%12+12*Nt(i===n.l10n.amPM[1]));const o=void 0!==n.config.minTime||n.config.minDate&&n.minDateHasTime&&n.latestSelectedDateObj&&0===Xt(n.latestSelectedDateObj,n.config.minDate,!0);if(void 0!==n.config.maxTime||n.config.maxDate&&n.maxDateHasTime&&n.latestSelectedDateObj&&0===Xt(n.latestSelectedDateObj,n.config.maxDate,!0)){const r=void 0!==n.config.maxTime?n.config.maxTime:n.config.maxDate;e=Math.min(e,r.getHours()),e===r.getHours()&&(t=Math.min(t,r.getMinutes())),t===r.getMinutes()&&(a=Math.min(a,r.getSeconds()))}if(o){const r=void 0!==n.config.minTime?n.config.minTime:n.config.minDate;e=Math.max(e,r.getHours()),e===r.getHours()&&t<r.getMinutes()&&(t=r.getMinutes()),t===r.getMinutes()&&(a=Math.max(a,r.getSeconds()))}c(e,t,a)}function s(e){const t=e||n.latestSelectedDateObj;t&&c(t.getHours(),t.getMinutes(),t.getSeconds())}function c(e,t,a){void 0!==n.latestSelectedDateObj&&n.latestSelectedDateObj.setHours(e%24,t,a||0,0),n.hourElement&&n.minuteElement&&!n.isMobile&&(n.hourElement.value=Lt(n.config.time_24hr?e:(12+e)%12+12*Nt(e%12==0)),n.minuteElement.value=Lt(t),void 0!==n.amPM&&(n.amPM.textContent=n.l10n.amPM[Nt(e>=12)]),void 0!==n.secondElement&&(n.secondElement.value=Lt(a)))}function d(e){const t=Ht(e),n=parseInt(t.value)+(e.delta||0);(n/1e3>1||"Enter"===e.key&&!/[^\d]/.test(n.toString()))&&P(n)}function l(e,t,a,r){return t instanceof Array?t.forEach((t=>l(e,t,a,r))):e instanceof Array?e.forEach((e=>l(e,t,a,r))):(e.addEventListener(t,a,r),void n._handlers.push({remove:()=>e.removeEventListener(t,a)}))}function u(){G("onChange")}function f(e,t){const a=void 0!==e?n.parseDate(e):n.latestSelectedDateObj||(n.config.minDate&&n.config.minDate>n.now?n.config.minDate:n.config.maxDate&&n.config.maxDate<n.now?n.config.maxDate:n.now),r=n.currentYear,i=n.currentMonth;try{void 0!==a&&(n.currentYear=a.getFullYear(),n.currentMonth=a.getMonth())}catch(e){e.message="Invalid date supplied: "+a,n.config.errorHandler(e)}t&&n.currentYear!==r&&(G("onYearChange"),C()),!t||n.currentYear===r&&n.currentMonth===i||G("onMonthChange"),n.redraw()}function p(e){const t=Ht(e);~t.className.indexOf("arrow")&&m(e,t.classList.contains("arrowUp")?1:-1)}function m(e,t,n){const a=e&&Ht(e),r=n||a&&a.parentNode&&a.parentNode.firstChild,i=X("increment");i.delta=t,r&&r.dispatchEvent(i)}function h(e,t,a,r){const i=L(t,!0),o=It("span","flatpickr-day "+e,t.getDate().toString());return o.dateObj=t,o.$i=r,o.setAttribute("aria-label",n.formatDate(t,n.config.ariaDateFormat)),-1===e.indexOf("hidden")&&0===Xt(t,n.now)&&(n.todayDateElem=o,o.classList.add("today"),o.setAttribute("aria-current","date")),i?(o.tabIndex=-1,$(t)&&(o.classList.add("selected"),n.selectedDateElem=o,"range"===n.config.mode&&(Yt(o,"startRange",n.selectedDates[0]&&0===Xt(t,n.selectedDates[0],!0)),Yt(o,"endRange",n.selectedDates[1]&&0===Xt(t,n.selectedDates[1],!0)),"nextMonthDay"===e&&o.classList.add("inRange")))):o.classList.add("flatpickr-disabled"),"range"===n.config.mode&&function(e){return!("range"!==n.config.mode||n.selectedDates.length<2)&&Xt(e,n.selectedDates[0])>=0&&Xt(e,n.selectedDates[1])<=0}(t)&&!$(t)&&o.classList.add("inRange"),n.weekNumbers&&1===n.config.showMonths&&"prevMonthDay"!==e&&a%7==1&&n.weekNumbers.insertAdjacentHTML("beforeend","<span class='flatpickr-day'>"+n.config.getWeek(t)+"</span>"),G("onDayCreate",o),o}function g(e){e.focus(),"range"===n.config.mode&&Y(e)}function y(e){const t=e>0?0:n.config.showMonths-1,a=e>0?n.config.showMonths:-1;for(let r=t;r!=a;r+=e){const t=n.daysContainer.children[r],a=e>0?0:t.children.length-1,i=e>0?t.children.length:-1;for(let n=a;n!=i;n+=e){const e=t.children[n];if(-1===e.className.indexOf("hidden")&&L(e.dateObj))return e}}}function w(e,t){const a=N(document.activeElement||document.body),r=void 0!==e?e:a?document.activeElement:void 0!==n.selectedDateElem&&N(n.selectedDateElem)?n.selectedDateElem:void 0!==n.todayDateElem&&N(n.todayDateElem)?n.todayDateElem:y(t>0?1:-1);void 0===r?n._input.focus():a?function(e,t){const a=-1===e.className.indexOf("Month")?e.dateObj.getMonth():n.currentMonth,r=t>0?n.config.showMonths:-1,i=t>0?1:-1;for(let o=a-n.currentMonth;o!=r;o+=i){const r=n.daysContainer.children[o],s=a-n.currentMonth===o?e.$i+t:t<0?r.children.length-1:0,c=r.children.length;for(let n=s;n>=0&&n<c&&n!=(t>0?c:-1);n+=i){const a=r.children[n];if(-1===a.className.indexOf("hidden")&&L(a.dateObj)&&Math.abs(e.$i-n)>=Math.abs(t))return g(a)}}n.changeMonth(i),w(y(i),0)}(r,t):g(r)}function b(e,t){const a=(new Date(e,t,1).getDay()-n.l10n.firstDayOfWeek+7)%7,r=n.utils.getDaysInMonth((t-1+12)%12,e),i=n.utils.getDaysInMonth(t,e),o=window.document.createDocumentFragment(),s=n.config.showMonths>1,c=s?"prevMonthDay hidden":"prevMonthDay",d=s?"nextMonthDay hidden":"nextMonthDay";let l=r+1-a,u=0;for(;l<=r;l++,u++)o.appendChild(h(c,new Date(e,t-1,l),l,u));for(l=1;l<=i;l++,u++)o.appendChild(h("",new Date(e,t,l),l,u));for(let r=i+1;r<=42-a&&(1===n.config.showMonths||u%7!=0);r++,u++)o.appendChild(h(d,new Date(e,t+1,r%i),r,u));const f=It("div","dayContainer");return f.appendChild(o),f}function v(){if(void 0===n.daysContainer)return;qt(n.daysContainer),n.weekNumbers&&qt(n.weekNumbers);const e=document.createDocumentFragment();for(let t=0;t<n.config.showMonths;t++){const a=new Date(n.currentYear,n.currentMonth,1);a.setMonth(n.currentMonth+t),e.appendChild(b(a.getFullYear(),a.getMonth()))}n.daysContainer.appendChild(e),n.days=n.daysContainer.firstChild,"range"===n.config.mode&&1===n.selectedDates.length&&Y()}function C(){if(n.config.showMonths>1||"dropdown"!==n.config.monthSelectorType)return;const e=function(e){return!(void 0!==n.config.minDate&&n.currentYear===n.config.minDate.getFullYear()&&e<n.config.minDate.getMonth()||void 0!==n.config.maxDate&&n.currentYear===n.config.maxDate.getFullYear()&&e>n.config.maxDate.getMonth())};n.monthsDropdownContainer.tabIndex=-1,n.monthsDropdownContainer.innerHTML="";for(let t=0;t<12;t++){if(!e(t))continue;const a=It("option","flatpickr-monthDropdown-month");a.value=new Date(n.currentYear,t).getMonth().toString(),a.textContent=_t(t,n.config.shorthandCurrentMonth,n.l10n),a.tabIndex=-1,n.currentMonth===t&&(a.selected=!0),n.monthsDropdownContainer.appendChild(a)}}function D(){const e=It("div","flatpickr-month"),t=window.document.createDocumentFragment();let a;n.config.showMonths>1||"static"===n.config.monthSelectorType?a=It("span","cur-month"):(n.monthsDropdownContainer=It("select","flatpickr-monthDropdown-months"),n.monthsDropdownContainer.setAttribute("aria-label",n.l10n.monthAriaLabel),l(n.monthsDropdownContainer,"change",(e=>{const t=Ht(e),a=parseInt(t.value,10);n.changeMonth(a-n.currentMonth),G("onMonthChange")})),C(),a=n.monthsDropdownContainer);const r=Ut("cur-year",{tabindex:"-1"}),i=r.getElementsByTagName("input")[0];i.setAttribute("aria-label",n.l10n.yearAriaLabel),n.config.minDate&&i.setAttribute("min",n.config.minDate.getFullYear().toString()),n.config.maxDate&&(i.setAttribute("max",n.config.maxDate.getFullYear().toString()),i.disabled=!!n.config.minDate&&n.config.minDate.getFullYear()===n.config.maxDate.getFullYear());const o=It("div","flatpickr-current-month");return o.appendChild(a),o.appendChild(r),t.appendChild(o),e.appendChild(t),{container:e,yearElement:i,monthElement:a}}function k(){qt(n.monthNav),n.monthNav.appendChild(n.prevMonthNav),n.config.showMonths&&(n.yearElements=[],n.monthElements=[]);for(let e=n.config.showMonths;e--;){const e=D();n.yearElements.push(e.yearElement),n.monthElements.push(e.monthElement),n.monthNav.appendChild(e.container)}n.monthNav.appendChild(n.nextMonthNav)}function M(){n.weekdayContainer?qt(n.weekdayContainer):n.weekdayContainer=It("div","flatpickr-weekdays");for(let e=n.config.showMonths;e--;){const e=It("div","flatpickr-weekdaycontainer");n.weekdayContainer.appendChild(e)}return T(),n.weekdayContainer}function T(){if(!n.weekdayContainer)return;const e=n.l10n.firstDayOfWeek;let t=[...n.l10n.weekdays.shorthand];e>0&&e<t.length&&(t=[...t.splice(e,t.length),...t.splice(0,e)]);for(let e=n.config.showMonths;e--;)n.weekdayContainer.children[e].innerHTML=`\n      <span class='flatpickr-weekday'>\n        ${t.join("</span><span class='flatpickr-weekday'>")}\n      </span>\n      `}function x(e,t=!0){const a=t?e:e-n.currentMonth;a<0&&!0===n._hidePrevMonthArrow||a>0&&!0===n._hideNextMonthArrow||(n.currentMonth+=a,(n.currentMonth<0||n.currentMonth>11)&&(n.currentYear+=n.currentMonth>11?1:-1,n.currentMonth=(n.currentMonth+12)%12,G("onYearChange"),C()),v(),G("onMonthChange"),z())}function E(e){return!(!n.config.appendTo||!n.config.appendTo.contains(e))||n.calendarContainer.contains(e)}function S(e){if(n.isOpen&&!n.config.inline){const t=Ht(e),a=E(t),r=t===n.input||t===n.altInput||n.element.contains(t)||e.path&&e.path.indexOf&&(~e.path.indexOf(n.input)||~e.path.indexOf(n.altInput)),o="blur"===e.type?r&&e.relatedTarget&&!E(e.relatedTarget):!r&&!a&&!E(e.relatedTarget),s=!n.config.ignoredFocusElements.some((e=>e.contains(t)));o&&s&&(void 0!==n.timeContainer&&void 0!==n.minuteElement&&void 0!==n.hourElement&&""!==n.input.value&&void 0!==n.input.value&&i(),n.close(),n.config&&"range"===n.config.mode&&1===n.selectedDates.length&&(n.clear(!1),n.redraw()))}}function P(e){if(!e||n.config.minDate&&e<n.config.minDate.getFullYear()||n.config.maxDate&&e>n.config.maxDate.getFullYear())return;const t=e,a=n.currentYear!==t;n.currentYear=t||n.currentYear,n.config.maxDate&&n.currentYear===n.config.maxDate.getFullYear()?n.currentMonth=Math.min(n.config.maxDate.getMonth(),n.currentMonth):n.config.minDate&&n.currentYear===n.config.minDate.getFullYear()&&(n.currentMonth=Math.max(n.config.minDate.getMonth(),n.currentMonth)),a&&(n.redraw(),G("onYearChange"),C())}function L(e,t=!0){var a;const r=n.parseDate(e,void 0,t);if(n.config.minDate&&r&&Xt(r,n.config.minDate,void 0!==t?t:!n.minDateHasTime)<0||n.config.maxDate&&r&&Xt(r,n.config.maxDate,void 0!==t?t:!n.maxDateHasTime)>0)return!1;if(!n.config.enable&&0===n.config.disable.length)return!0;if(void 0===r)return!1;const i=!!n.config.enable,o=null!==(a=n.config.enable)&&void 0!==a?a:n.config.disable;for(let e,t=0;t<o.length;t++){if(e=o[t],"function"==typeof e&&e(r))return i;if(e instanceof Date&&void 0!==r&&e.getTime()===r.getTime())return i;if("string"==typeof e){const t=n.parseDate(e,void 0,!0);return t&&t.getTime()===r.getTime()?i:!i}if("object"==typeof e&&void 0!==r&&e.from&&e.to&&r.getTime()>=e.from.getTime()&&r.getTime()<=e.to.getTime())return i}return!i}function N(e){return void 0!==n.daysContainer&&-1===e.className.indexOf("hidden")&&-1===e.className.indexOf("flatpickr-disabled")&&n.daysContainer.contains(e)}function O(e){e.target!==n._input||!(n.selectedDates.length>0||n._input.value.length>0)||e.relatedTarget&&E(e.relatedTarget)||n.setDate(n._input.value,!0,e.target===n.altInput?n.config.altFormat:n.config.dateFormat)}function j(t){const a=Ht(t),r=n.config.wrap?e.contains(a):a===n._input,s=n.config.allowInput,c=n.isOpen&&(!s||!r),d=n.config.inline&&r&&!s;if(13===t.keyCode&&r){if(s)return n.setDate(n._input.value,!0,a===n.altInput?n.config.altFormat:n.config.dateFormat),a.blur();n.open()}else if(E(a)||c||d){const e=!!n.timeContainer&&n.timeContainer.contains(a);switch(t.keyCode){case 13:e?(t.preventDefault(),i(),_()):W(t);break;case 27:t.preventDefault(),_();break;case 8:case 46:r&&!n.config.allowInput&&(t.preventDefault(),n.clear());break;case 37:case 39:if(e||r)n.hourElement&&n.hourElement.focus();else if(t.preventDefault(),void 0!==n.daysContainer&&(!1===s||document.activeElement&&N(document.activeElement))){const e=39===t.keyCode?1:-1;t.ctrlKey?(t.stopPropagation(),x(e),w(y(1),0)):w(void 0,e)}break;case 38:case 40:t.preventDefault();const o=40===t.keyCode?1:-1;n.daysContainer&&void 0!==a.$i||a===n.input||a===n.altInput?t.ctrlKey?(t.stopPropagation(),P(n.currentYear-o),w(y(1),0)):e||w(void 0,7*o):a===n.currentYearElement?P(n.currentYear-o):n.config.enableTime&&(!e&&n.hourElement&&n.hourElement.focus(),i(t),n._debouncedChange());break;case 9:if(e){const e=[n.hourElement,n.minuteElement,n.secondElement,n.amPM].concat(n.pluginElements).filter((e=>e)),r=e.indexOf(a);if(-1!==r){const a=e[r+(t.shiftKey?-1:1)];t.preventDefault(),(a||n._input).focus()}}else!n.config.noCalendar&&n.daysContainer&&n.daysContainer.contains(a)&&t.shiftKey&&(t.preventDefault(),n._input.focus())}}if(void 0!==n.amPM&&a===n.amPM)switch(t.key){case n.l10n.amPM[0].charAt(0):case n.l10n.amPM[0].charAt(0).toLowerCase():n.amPM.textContent=n.l10n.amPM[0],o(),J();break;case n.l10n.amPM[1].charAt(0):case n.l10n.amPM[1].charAt(0).toLowerCase():n.amPM.textContent=n.l10n.amPM[1],o(),J()}(r||E(a))&&G("onKeyDown",t)}function Y(e){if(1!==n.selectedDates.length||e&&(!e.classList.contains("flatpickr-day")||e.classList.contains("flatpickr-disabled")))return;const t=e?e.dateObj.getTime():n.days.firstElementChild.dateObj.getTime(),a=n.parseDate(n.selectedDates[0],void 0,!0).getTime(),r=Math.min(t,n.selectedDates[0].getTime()),i=Math.max(t,n.selectedDates[0].getTime());let o=!1,s=0,c=0;for(let e=r;e<i;e+=864e5)L(new Date(e),!0)||(o=o||e>r&&e<i,e<a&&(!s||e>s)?s=e:e>a&&(!c||e<c)&&(c=e));for(let r=0;r<n.config.showMonths;r++){const i=n.daysContainer.children[r];for(let r=0,f=i.children.length;r<f;r++){const f=i.children[r],p=f.dateObj.getTime(),m=s>0&&p<s||c>0&&p>c;m?(f.classList.add("notAllowed"),["inRange","startRange","endRange"].forEach((e=>{f.classList.remove(e)}))):o&&!m||(["startRange","inRange","endRange","notAllowed"].forEach((e=>{f.classList.remove(e)})),void 0!==e&&(e.classList.add(t<=n.selectedDates[0].getTime()?"startRange":"endRange"),a<t&&p===a?f.classList.add("startRange"):a>t&&p===a&&f.classList.add("endRange"),p>=s&&(0===c||p<=c)&&(l=a,u=t,(d=p)>Math.min(l,u)&&d<Math.max(l,u))&&f.classList.add("inRange")))}}var d,l,u}function I(){!n.isOpen||n.config.static||n.config.inline||H()}function q(e){return t=>{const a=n.config[`_${e}Date`]=n.parseDate(t,n.config.dateFormat),r=n.config[`_${"min"===e?"max":"min"}Date`];void 0!==a&&(n["min"===e?"minDateHasTime":"maxDateHasTime"]=a.getHours()>0||a.getMinutes()>0||a.getSeconds()>0),n.selectedDates&&(n.selectedDates=n.selectedDates.filter((e=>L(e))),n.selectedDates.length||"min"!==e||s(a),J()),n.daysContainer&&(A(),void 0!==a?n.currentYearElement[e]=a.getFullYear().toString():n.currentYearElement.removeAttribute(e),n.currentYearElement.disabled=!!r&&void 0!==a&&r.getFullYear()===a.getFullYear())}}function F(){return n.config.wrap?e.querySelector("[data-input]"):e}function U(){"object"!=typeof n.config.locale&&void 0===Jt.l10ns[n.config.locale]&&n.config.errorHandler(new Error(`flatpickr: invalid locale ${n.config.locale}`)),n.l10n=Object.assign(Object.assign({},Jt.l10ns.default),"object"==typeof n.config.locale?n.config.locale:"default"!==n.config.locale?Jt.l10ns[n.config.locale]:void 0),Rt.K=`(${n.l10n.amPM[0]}|${n.l10n.amPM[1]}|${n.l10n.amPM[0].toLowerCase()}|${n.l10n.amPM[1].toLowerCase()})`,void 0===Object.assign(Object.assign({},t),JSON.parse(JSON.stringify(e.dataset||{}))).time_24hr&&void 0===Jt.defaultConfig.time_24hr&&(n.config.time_24hr=n.l10n.time_24hr),n.formatDate=Qt(n),n.parseDate=Gt({config:n.config,l10n:n.l10n})}function H(e){if("function"==typeof n.config.position)return void n.config.position(n,e);if(void 0===n.calendarContainer)return;G("onPreCalendarPosition");const t=e||n._positionElement,a=Array.prototype.reduce.call(n.calendarContainer.children,((e,t)=>e+t.offsetHeight),0),r=n.calendarContainer.offsetWidth,i=n.config.position.split(" "),o=i[0],s=i.length>1?i[1]:null,c=t.getBoundingClientRect(),d=window.innerHeight-c.bottom,l="above"===o||"below"!==o&&d<a&&c.top>a,u=window.pageYOffset+c.top+(l?-a-2:t.offsetHeight+2);if(Yt(n.calendarContainer,"arrowTop",!l),Yt(n.calendarContainer,"arrowBottom",l),n.config.inline)return;let f=window.pageXOffset+c.left,p=!1,m=!1;"center"===s?(f-=(r-c.width)/2,p=!0):"right"===s&&(f-=r-c.width,m=!0),Yt(n.calendarContainer,"arrowLeft",!p&&!m),Yt(n.calendarContainer,"arrowCenter",p),Yt(n.calendarContainer,"arrowRight",m);const h=window.document.body.offsetWidth-(window.pageXOffset+c.right),g=f+r>window.document.body.offsetWidth,y=h+r>window.document.body.offsetWidth;if(Yt(n.calendarContainer,"rightMost",g),!n.config.static)if(n.calendarContainer.style.top=`${u}px`,g)if(y){const e=function(){let e=null;for(let t=0;t<document.styleSheets.length;t++){const n=document.styleSheets[t];try{n.cssRules}catch(e){continue}e=n;break}return null!=e?e:function(){const e=document.createElement("style");return document.head.appendChild(e),e.sheet}()}();if(void 0===e)return;const t=window.document.body.offsetWidth,a=Math.max(0,t/2-r/2),i=".flatpickr-calendar.centerMost:before",o=".flatpickr-calendar.centerMost:after",s=e.cssRules.length,d=`{left:${c.left}px;right:auto;}`;Yt(n.calendarContainer,"rightMost",!1),Yt(n.calendarContainer,"centerMost",!0),e.insertRule(`${i},${o}${d}`,s),n.calendarContainer.style.left=`${a}px`,n.calendarContainer.style.right="auto"}else n.calendarContainer.style.left="auto",n.calendarContainer.style.right=`${h}px`;else n.calendarContainer.style.left=`${f}px`,n.calendarContainer.style.right="auto"}function A(){n.config.noCalendar||n.isMobile||(C(),z(),v())}function _(){n._input.focus(),-1!==window.navigator.userAgent.indexOf("MSIE")||void 0!==navigator.msMaxTouchPoints?setTimeout(n.close,0):n.close()}function W(e){e.preventDefault(),e.stopPropagation();const t=Ft(Ht(e),(e=>e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("flatpickr-disabled")&&!e.classList.contains("notAllowed")));if(void 0===t)return;const a=t,r=n.latestSelectedDateObj=new Date(a.dateObj.getTime()),i=(r.getMonth()<n.currentMonth||r.getMonth()>n.currentMonth+n.config.showMonths-1)&&"range"!==n.config.mode;if(n.selectedDateElem=a,"single"===n.config.mode)n.selectedDates=[r];else if("multiple"===n.config.mode){const e=$(r);e?n.selectedDates.splice(parseInt(e),1):n.selectedDates.push(r)}else"range"===n.config.mode&&(2===n.selectedDates.length&&n.clear(!1,!1),n.latestSelectedDateObj=r,n.selectedDates.push(r),0!==Xt(r,n.selectedDates[0],!0)&&n.selectedDates.sort(((e,t)=>e.getTime()-t.getTime())));if(o(),i){const e=n.currentYear!==r.getFullYear();n.currentYear=r.getFullYear(),n.currentMonth=r.getMonth(),e&&(G("onYearChange"),C()),G("onMonthChange")}if(z(),v(),J(),i||"range"===n.config.mode||1!==n.config.showMonths?void 0!==n.selectedDateElem&&void 0===n.hourElement&&n.selectedDateElem&&n.selectedDateElem.focus():g(a),void 0!==n.hourElement&&void 0!==n.hourElement&&n.hourElement.focus(),n.config.closeOnSelect){const e="single"===n.config.mode&&!n.config.enableTime,t="range"===n.config.mode&&2===n.selectedDates.length&&!n.config.enableTime;(e||t)&&_()}u()}n.parseDate=Gt({config:n.config,l10n:n.l10n}),n._handlers=[],n.pluginElements=[],n.loadedPlugins=[],n._bind=l,n._setHoursFromDate=s,n._positionCalendar=H,n.changeMonth=x,n.changeYear=P,n.clear=function(e=!0,t=!0){if(n.input.value="",void 0!==n.altInput&&(n.altInput.value=""),void 0!==n.mobileInput&&(n.mobileInput.value=""),n.selectedDates=[],n.latestSelectedDateObj=void 0,!0===t&&(n.currentYear=n._initialDate.getFullYear(),n.currentMonth=n._initialDate.getMonth()),!0===n.config.enableTime){const{hours:e,minutes:t,seconds:a}=$t(n.config);c(e,t,a)}n.redraw(),e&&G("onChange")},n.close=function(){n.isOpen=!1,n.isMobile||(void 0!==n.calendarContainer&&n.calendarContainer.classList.remove("open"),void 0!==n._input&&n._input.classList.remove("active")),G("onClose")},n._createElement=It,n.destroy=function(){void 0!==n.config&&G("onDestroy");for(let e=n._handlers.length;e--;)n._handlers[e].remove();if(n._handlers=[],n.mobileInput)n.mobileInput.parentNode&&n.mobileInput.parentNode.removeChild(n.mobileInput),n.mobileInput=void 0;else if(n.calendarContainer&&n.calendarContainer.parentNode)if(n.config.static&&n.calendarContainer.parentNode){const e=n.calendarContainer.parentNode;if(e.lastChild&&e.removeChild(e.lastChild),e.parentNode){for(;e.firstChild;)e.parentNode.insertBefore(e.firstChild,e);e.parentNode.removeChild(e)}}else n.calendarContainer.parentNode.removeChild(n.calendarContainer);n.altInput&&(n.input.type="text",n.altInput.parentNode&&n.altInput.parentNode.removeChild(n.altInput),delete n.altInput),n.input&&(n.input.type=n.input._type,n.input.classList.remove("flatpickr-input"),n.input.removeAttribute("readonly")),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","monthsDropdownContainer","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach((e=>{try{delete n[e]}catch(e){}}))},n.isEnabled=L,n.jumpToDate=f,n.open=function(e,t=n._positionElement){if(!0===n.isMobile){if(e){e.preventDefault();const t=Ht(e);t&&t.blur()}return void 0!==n.mobileInput&&(n.mobileInput.focus(),n.mobileInput.click()),void G("onOpen")}if(n._input.disabled||n.config.inline)return;const a=n.isOpen;n.isOpen=!0,a||(n.calendarContainer.classList.add("open"),n._input.classList.add("active"),G("onOpen"),H(t)),!0===n.config.enableTime&&!0===n.config.noCalendar&&(!1!==n.config.allowInput||void 0!==e&&n.timeContainer.contains(e.relatedTarget)||setTimeout((()=>n.hourElement.select()),50))},n.redraw=A,n.set=function(e,t){if(null!==e&&"object"==typeof e){Object.assign(n.config,e);for(const t in e)void 0!==R[t]&&R[t].forEach((e=>e()))}else n.config[e]=t,void 0!==R[e]?R[e].forEach((e=>e())):xt.indexOf(e)>-1&&(n.config[e]=jt(t));n.redraw(),J(!0)},n.setDate=function(e,t=!1,a=n.config.dateFormat){if(0!==e&&!e||e instanceof Array&&0===e.length)return n.clear(t);B(e,a),n.latestSelectedDateObj=n.selectedDates[n.selectedDates.length-1],n.redraw(),f(void 0,t),s(),0===n.selectedDates.length&&n.clear(!1),J(t),t&&G("onChange")},n.toggle=function(e){if(!0===n.isOpen)return n.close();n.open(e)};const R={locale:[U,T],showMonths:[k,r,M],minDate:[f],maxDate:[f],clickOpens:[()=>{!0===n.config.clickOpens?(l(n._input,"focus",n.open),l(n._input,"click",n.open)):(n._input.removeEventListener("focus",n.open),n._input.removeEventListener("click",n.open))}]};function B(e,t){let a=[];if(e instanceof Array)a=e.map((e=>n.parseDate(e,t)));else if(e instanceof Date||"number"==typeof e)a=[n.parseDate(e,t)];else if("string"==typeof e)switch(n.config.mode){case"single":case"time":a=[n.parseDate(e,t)];break;case"multiple":a=e.split(n.config.conjunction).map((e=>n.parseDate(e,t)));break;case"range":a=e.split(n.l10n.rangeSeparator).map((e=>n.parseDate(e,t)))}else n.config.errorHandler(new Error(`Invalid date supplied: ${JSON.stringify(e)}`));n.selectedDates=n.config.allowInvalidPreload?a:a.filter((e=>e instanceof Date&&L(e,!1))),"range"===n.config.mode&&n.selectedDates.sort(((e,t)=>e.getTime()-t.getTime()))}function Q(e){return e.slice().map((e=>"string"==typeof e||"number"==typeof e||e instanceof Date?n.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:n.parseDate(e.from,void 0),to:n.parseDate(e.to,void 0)}:e)).filter((e=>e))}function G(e,t){if(void 0===n.config)return;const a=n.config[e];if(void 0!==a&&a.length>0)for(let e=0;a[e]&&e<a.length;e++)a[e](n.selectedDates,n.input.value,n,t);"onChange"===e&&(n.input.dispatchEvent(X("change")),n.input.dispatchEvent(X("input")))}function X(e){const t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function $(e){for(let t=0;t<n.selectedDates.length;t++)if(0===Xt(n.selectedDates[t],e))return""+t;return!1}function z(){n.config.noCalendar||n.isMobile||!n.monthNav||(n.yearElements.forEach(((e,t)=>{const a=new Date(n.currentYear,n.currentMonth,1);a.setMonth(n.currentMonth+t),n.config.showMonths>1||"static"===n.config.monthSelectorType?n.monthElements[t].textContent=_t(a.getMonth(),n.config.shorthandCurrentMonth,n.l10n)+" ":n.monthsDropdownContainer.value=a.getMonth().toString(),e.value=a.getFullYear().toString()})),n._hidePrevMonthArrow=void 0!==n.config.minDate&&(n.currentYear===n.config.minDate.getFullYear()?n.currentMonth<=n.config.minDate.getMonth():n.currentYear<n.config.minDate.getFullYear()),n._hideNextMonthArrow=void 0!==n.config.maxDate&&(n.currentYear===n.config.maxDate.getFullYear()?n.currentMonth+1>n.config.maxDate.getMonth():n.currentYear>n.config.maxDate.getFullYear()))}function K(e){return n.selectedDates.map((t=>n.formatDate(t,e))).filter(((e,t,a)=>"range"!==n.config.mode||n.config.enableTime||a.indexOf(e)===t)).join("range"!==n.config.mode?n.config.conjunction:n.l10n.rangeSeparator)}function J(e=!0){void 0!==n.mobileInput&&n.mobileFormatStr&&(n.mobileInput.value=void 0!==n.latestSelectedDateObj?n.formatDate(n.latestSelectedDateObj,n.mobileFormatStr):""),n.input.value=K(n.config.dateFormat),void 0!==n.altInput&&(n.altInput.value=K(n.config.altFormat)),!1!==e&&G("onValueUpdate")}function Z(e){const t=Ht(e),a=n.prevMonthNav.contains(t),r=n.nextMonthNav.contains(t);a||r?x(a?-1:1):n.yearElements.indexOf(t)>=0?t.select():t.classList.contains("arrowUp")?n.changeYear(n.currentYear+1):t.classList.contains("arrowDown")&&n.changeYear(n.currentYear-1)}return function(){n.element=n.input=e,n.isOpen=!1,function(){const r=["wrap","weekNumbers","allowInput","allowInvalidPreload","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],i=Object.assign(Object.assign({},JSON.parse(JSON.stringify(e.dataset||{}))),t),o={};n.config.parseDate=i.parseDate,n.config.formatDate=i.formatDate,Object.defineProperty(n.config,"enable",{get:()=>n.config._enable,set:e=>{n.config._enable=Q(e)}}),Object.defineProperty(n.config,"disable",{get:()=>n.config._disable,set:e=>{n.config._disable=Q(e)}});const s="time"===i.mode;if(!i.dateFormat&&(i.enableTime||s)){const e=Jt.defaultConfig.dateFormat||Et.dateFormat;o.dateFormat=i.noCalendar||s?"H:i"+(i.enableSeconds?":S":""):e+" H:i"+(i.enableSeconds?":S":"")}if(i.altInput&&(i.enableTime||s)&&!i.altFormat){const e=Jt.defaultConfig.altFormat||Et.altFormat;o.altFormat=i.noCalendar||s?"h:i"+(i.enableSeconds?":S K":" K"):e+` h:i${i.enableSeconds?":S":""} K`}Object.defineProperty(n.config,"minDate",{get:()=>n.config._minDate,set:q("min")}),Object.defineProperty(n.config,"maxDate",{get:()=>n.config._maxDate,set:q("max")});const c=e=>t=>{n.config["min"===e?"_minTime":"_maxTime"]=n.parseDate(t,"H:i:S")};Object.defineProperty(n.config,"minTime",{get:()=>n.config._minTime,set:c("min")}),Object.defineProperty(n.config,"maxTime",{get:()=>n.config._maxTime,set:c("max")}),"time"===i.mode&&(n.config.noCalendar=!0,n.config.enableTime=!0),Object.assign(n.config,o,i);for(let e=0;e<r.length;e++)n.config[r[e]]=!0===n.config[r[e]]||"true"===n.config[r[e]];xt.filter((e=>void 0!==n.config[e])).forEach((e=>{n.config[e]=jt(n.config[e]||[]).map(a)})),n.isMobile=!n.config.disableMobile&&!n.config.inline&&"single"===n.config.mode&&!n.config.disable.length&&!n.config.enable&&!n.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);for(let e=0;e<n.config.plugins.length;e++){const t=n.config.plugins[e](n)||{};for(const e in t)xt.indexOf(e)>-1?n.config[e]=jt(t[e]).map(a).concat(n.config[e]):void 0===i[e]&&(n.config[e]=t[e])}i.altInputClass||(n.config.altInputClass=F().className+" "+n.config.altInputClass),G("onParseConfig")}(),U(),n.input=F(),n.input?(n.input._type=n.input.type,n.input.type="text",n.input.classList.add("flatpickr-input"),n._input=n.input,n.config.altInput&&(n.altInput=It(n.input.nodeName,n.config.altInputClass),n._input=n.altInput,n.altInput.placeholder=n.input.placeholder,n.altInput.disabled=n.input.disabled,n.altInput.required=n.input.required,n.altInput.tabIndex=n.input.tabIndex,n.altInput.type="text",n.input.setAttribute("type","hidden"),!n.config.static&&n.input.parentNode&&n.input.parentNode.insertBefore(n.altInput,n.input.nextSibling)),n.config.allowInput||n._input.setAttribute("readonly","readonly"),n._positionElement=n.config.positionElement||n._input):n.config.errorHandler(new Error("Invalid input element specified")),function(){n.selectedDates=[],n.now=n.parseDate(n.config.now)||new Date;const e=n.config.defaultDate||("INPUT"!==n.input.nodeName&&"TEXTAREA"!==n.input.nodeName||!n.input.placeholder||n.input.value!==n.input.placeholder?n.input.value:null);e&&B(e,n.config.dateFormat),n._initialDate=n.selectedDates.length>0?n.selectedDates[0]:n.config.minDate&&n.config.minDate.getTime()>n.now.getTime()?n.config.minDate:n.config.maxDate&&n.config.maxDate.getTime()<n.now.getTime()?n.config.maxDate:n.now,n.currentYear=n._initialDate.getFullYear(),n.currentMonth=n._initialDate.getMonth(),n.selectedDates.length>0&&(n.latestSelectedDateObj=n.selectedDates[0]),void 0!==n.config.minTime&&(n.config.minTime=n.parseDate(n.config.minTime,"H:i")),void 0!==n.config.maxTime&&(n.config.maxTime=n.parseDate(n.config.maxTime,"H:i")),n.minDateHasTime=!!n.config.minDate&&(n.config.minDate.getHours()>0||n.config.minDate.getMinutes()>0||n.config.minDate.getSeconds()>0),n.maxDateHasTime=!!n.config.maxDate&&(n.config.maxDate.getHours()>0||n.config.maxDate.getMinutes()>0||n.config.maxDate.getSeconds()>0)}(),n.utils={getDaysInMonth:(e=n.currentMonth,t=n.currentYear)=>1===e&&(t%4==0&&t%100!=0||t%400==0)?29:n.l10n.daysInMonth[e]},n.isMobile||function(){const e=window.document.createDocumentFragment();if(n.calendarContainer=It("div","flatpickr-calendar"),n.calendarContainer.tabIndex=-1,!n.config.noCalendar){if(e.appendChild((n.monthNav=It("div","flatpickr-months"),n.yearElements=[],n.monthElements=[],n.prevMonthNav=It("span","flatpickr-prev-month"),n.prevMonthNav.innerHTML=n.config.prevArrow,n.nextMonthNav=It("span","flatpickr-next-month"),n.nextMonthNav.innerHTML=n.config.nextArrow,k(),Object.defineProperty(n,"_hidePrevMonthArrow",{get:()=>n.__hidePrevMonthArrow,set(e){n.__hidePrevMonthArrow!==e&&(Yt(n.prevMonthNav,"flatpickr-disabled",e),n.__hidePrevMonthArrow=e)}}),Object.defineProperty(n,"_hideNextMonthArrow",{get:()=>n.__hideNextMonthArrow,set(e){n.__hideNextMonthArrow!==e&&(Yt(n.nextMonthNav,"flatpickr-disabled",e),n.__hideNextMonthArrow=e)}}),n.currentYearElement=n.yearElements[0],z(),n.monthNav)),n.innerContainer=It("div","flatpickr-innerContainer"),n.config.weekNumbers){const{weekWrapper:e,weekNumbers:t}=function(){n.calendarContainer.classList.add("hasWeeks");const e=It("div","flatpickr-weekwrapper");e.appendChild(It("span","flatpickr-weekday",n.l10n.weekAbbreviation));const t=It("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}();n.innerContainer.appendChild(e),n.weekNumbers=t,n.weekWrapper=e}n.rContainer=It("div","flatpickr-rContainer"),n.rContainer.appendChild(M()),n.daysContainer||(n.daysContainer=It("div","flatpickr-days"),n.daysContainer.tabIndex=-1),v(),n.rContainer.appendChild(n.daysContainer),n.innerContainer.appendChild(n.rContainer),e.appendChild(n.innerContainer)}n.config.enableTime&&e.appendChild(function(){n.calendarContainer.classList.add("hasTime"),n.config.noCalendar&&n.calendarContainer.classList.add("noCalendar");const e=$t(n.config);n.timeContainer=It("div","flatpickr-time"),n.timeContainer.tabIndex=-1;const t=It("span","flatpickr-time-separator",":"),a=Ut("flatpickr-hour",{"aria-label":n.l10n.hourAriaLabel});n.hourElement=a.getElementsByTagName("input")[0];const r=Ut("flatpickr-minute",{"aria-label":n.l10n.minuteAriaLabel});if(n.minuteElement=r.getElementsByTagName("input")[0],n.hourElement.tabIndex=n.minuteElement.tabIndex=-1,n.hourElement.value=Lt(n.latestSelectedDateObj?n.latestSelectedDateObj.getHours():n.config.time_24hr?e.hours:function(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}(e.hours)),n.minuteElement.value=Lt(n.latestSelectedDateObj?n.latestSelectedDateObj.getMinutes():e.minutes),n.hourElement.setAttribute("step",n.config.hourIncrement.toString()),n.minuteElement.setAttribute("step",n.config.minuteIncrement.toString()),n.hourElement.setAttribute("min",n.config.time_24hr?"0":"1"),n.hourElement.setAttribute("max",n.config.time_24hr?"23":"12"),n.hourElement.setAttribute("maxlength","2"),n.minuteElement.setAttribute("min","0"),n.minuteElement.setAttribute("max","59"),n.minuteElement.setAttribute("maxlength","2"),n.timeContainer.appendChild(a),n.timeContainer.appendChild(t),n.timeContainer.appendChild(r),n.config.time_24hr&&n.timeContainer.classList.add("time24hr"),n.config.enableSeconds){n.timeContainer.classList.add("hasSeconds");const t=Ut("flatpickr-second");n.secondElement=t.getElementsByTagName("input")[0],n.secondElement.value=Lt(n.latestSelectedDateObj?n.latestSelectedDateObj.getSeconds():e.seconds),n.secondElement.setAttribute("step",n.minuteElement.getAttribute("step")),n.secondElement.setAttribute("min","0"),n.secondElement.setAttribute("max","59"),n.secondElement.setAttribute("maxlength","2"),n.timeContainer.appendChild(It("span","flatpickr-time-separator",":")),n.timeContainer.appendChild(t)}return n.config.time_24hr||(n.amPM=It("span","flatpickr-am-pm",n.l10n.amPM[Nt((n.latestSelectedDateObj?n.hourElement.value:n.config.defaultHour)>11)]),n.amPM.title=n.l10n.toggleTitle,n.amPM.tabIndex=-1,n.timeContainer.appendChild(n.amPM)),n.timeContainer}()),Yt(n.calendarContainer,"rangeMode","range"===n.config.mode),Yt(n.calendarContainer,"animate",!0===n.config.animate),Yt(n.calendarContainer,"multiMonth",n.config.showMonths>1),n.calendarContainer.appendChild(e);const t=void 0!==n.config.appendTo&&void 0!==n.config.appendTo.nodeType;if((n.config.inline||n.config.static)&&(n.calendarContainer.classList.add(n.config.inline?"inline":"static"),n.config.inline&&(!t&&n.element.parentNode?n.element.parentNode.insertBefore(n.calendarContainer,n._input.nextSibling):void 0!==n.config.appendTo&&n.config.appendTo.appendChild(n.calendarContainer)),n.config.static)){const e=It("div","flatpickr-wrapper");n.element.parentNode&&n.element.parentNode.insertBefore(e,n.element),e.appendChild(n.element),n.altInput&&e.appendChild(n.altInput),e.appendChild(n.calendarContainer)}n.config.static||n.config.inline||(void 0!==n.config.appendTo?n.config.appendTo:window.document.body).appendChild(n.calendarContainer)}(),function(){if(n.config.wrap&&["open","close","toggle","clear"].forEach((e=>{Array.prototype.forEach.call(n.element.querySelectorAll(`[data-${e}]`),(t=>l(t,"click",n[e])))})),n.isMobile)return void function(){const e=n.config.enableTime?n.config.noCalendar?"time":"datetime-local":"date";n.mobileInput=It("input",n.input.className+" flatpickr-mobile"),n.mobileInput.tabIndex=1,n.mobileInput.type=e,n.mobileInput.disabled=n.input.disabled,n.mobileInput.required=n.input.required,n.mobileInput.placeholder=n.input.placeholder,n.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",n.selectedDates.length>0&&(n.mobileInput.defaultValue=n.mobileInput.value=n.formatDate(n.selectedDates[0],n.mobileFormatStr)),n.config.minDate&&(n.mobileInput.min=n.formatDate(n.config.minDate,"Y-m-d")),n.config.maxDate&&(n.mobileInput.max=n.formatDate(n.config.maxDate,"Y-m-d")),n.input.getAttribute("step")&&(n.mobileInput.step=String(n.input.getAttribute("step"))),n.input.type="hidden",void 0!==n.altInput&&(n.altInput.type="hidden");try{n.input.parentNode&&n.input.parentNode.insertBefore(n.mobileInput,n.input.nextSibling)}catch(e){}l(n.mobileInput,"change",(e=>{n.setDate(Ht(e).value,!1,n.mobileFormatStr),G("onChange"),G("onClose")}))}();const e=Ot(I,50);if(n._debouncedChange=Ot(u,300),n.daysContainer&&!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&l(n.daysContainer,"mouseover",(e=>{"range"===n.config.mode&&Y(Ht(e))})),l(window.document.body,"keydown",j),n.config.inline||n.config.static||l(window,"resize",e),void 0!==window.ontouchstart?l(window.document,"touchstart",S):l(window.document,"mousedown",S),l(window.document,"focus",S,{capture:!0}),!0===n.config.clickOpens&&(l(n._input,"focus",n.open),l(n._input,"click",n.open)),void 0!==n.daysContainer&&(l(n.monthNav,"click",Z),l(n.monthNav,["keyup","increment"],d),l(n.daysContainer,"click",W)),void 0!==n.timeContainer&&void 0!==n.minuteElement&&void 0!==n.hourElement){const e=e=>Ht(e).select();l(n.timeContainer,["increment"],i),l(n.timeContainer,"blur",i,{capture:!0}),l(n.timeContainer,"click",p),l([n.hourElement,n.minuteElement],["focus","click"],e),void 0!==n.secondElement&&l(n.secondElement,"focus",(()=>n.secondElement&&n.secondElement.select())),void 0!==n.amPM&&l(n.amPM,"click",(e=>{i(e),u()}))}n.config.allowInput&&l(n._input,"blur",O)}(),(n.selectedDates.length||n.config.noCalendar)&&(n.config.enableTime&&s(n.config.noCalendar?n.latestSelectedDateObj:void 0),J(!1)),r();const o=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);!n.isMobile&&o&&H(),G("onReady")}(),n}function Kt(e,t){const n=Array.prototype.slice.call(e).filter((e=>e instanceof HTMLElement)),a=[];for(let e=0;e<n.length;e++){const r=n[e];try{if(null!==r.getAttribute("data-fp-omit"))continue;void 0!==r._flatpickr&&(r._flatpickr.destroy(),r._flatpickr=void 0),r._flatpickr=zt(r,t||{}),a.push(r._flatpickr)}catch(e){console.error(e)}}return 1===a.length?a[0]:a}n(895),"undefined"!=typeof HTMLElement&&"undefined"!=typeof HTMLCollection&&"undefined"!=typeof NodeList&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return Kt(this,e)},HTMLElement.prototype.flatpickr=function(e){return Kt([this],e)});var Jt=function(e,t){return"string"==typeof e?Kt(window.document.querySelectorAll(e),t):e instanceof Node?Kt([e],t):Kt(e,t)};Jt.defaultConfig={},Jt.l10ns={en:Object.assign({},Pt),default:Object.assign({},Pt)},Jt.localize=e=>{Jt.l10ns.default=Object.assign(Object.assign({},Jt.l10ns.default),e)},Jt.setDefaults=e=>{Jt.defaultConfig=Object.assign(Object.assign({},Jt.defaultConfig),e)},Jt.parseDate=Gt({}),Jt.formatDate=Qt({}),Jt.compareDates=Xt,"undefined"!=typeof jQuery&&void 0!==jQuery.fn&&(jQuery.fn.flatpickr=function(e){return Kt(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))},"undefined"!=typeof window&&(window.flatpickr=Jt);const Zt=Jt;function Vt(e){e.target===this&&(document.querySelector(".edit-mode .btn-cancel").click(),this.classList.remove("show"))}const en=function(){const e=document.createElement("div");return e.classList.add("form-overlay"),e.addEventListener("click",Vt),e},tn=function(){const t=document.createElement("main"),n=e("header",{id:"header-upcoming"});t.appendChild(n);const a=document.createElement("h3");a.append(e("i",{class:"fas fa-calendar-alt"}),"Upcoming"),n.appendChild(a),Mt.findUpcomingTasks().forEach((n=>{const a=e("article",{class:"day-tasks"});t.appendChild(a);const r=document.createElement("h4");r.textContent=function(e){const t=rt(e,"MMM d yyyy",new Date);return lt(t)?se(t,"MMM d, 'Tomorrow'"):ft(t)?se(t,"MMM d, eeee"):se(t,"MMM d yyyy, eeee")}(n.date),a.appendChild(r);const i=e("ul",{class:"task-list"});a.appendChild(i),n.tasks.forEach((e=>{const t=Mt.list.find((t=>t.id===e.id));i.appendChild(an(e.task,t,"upcoming"))}))}));const r=e("div",{id:"task-form-wrapper"});t.appendChild(r),r.appendChild(cn("upcoming"));const i=e("button",{type:"button",class:"btn-menu btn-add"});return i.textContent=" New task",r.appendChild(i),t.appendChild(en()),i.addEventListener("click",dn),t},nn=function(t,n){const a=e("div",{id:"conf-wrapper","data-click":"cancel"}),r=e("div",{id:"conf-delete"});a.appendChild(r);const i=document.createElement("p"),o=e("span",{class:"title-span"});o.textContent=n,i.append(`${t} `,o," ?");const s=e("div",{class:"btn-conf-wrapper"});r.append(i,s);const c=e("button",{type:"button",class:"btn-form btn-delete","data-click":"delete"});c.textContent="Delete";const d=e("button",{type:"button",class:"btn-form btn-cancel","data-click":"cancel"});return d.textContent="Cancel",s.append(c,d),a};function an(n,i,s){const c=e("li",{role:"button","aria-expanded":"false",tabindex:"0"});n.complete&&c.classList.add("checked"),n.priority&&c.classList.add("priority");const d=e("div",{class:"task-main"});c.appendChild(d);const l=e("button",{type:"button","aria-label":"complete-task",class:"btn-check"}),u=e("i",{class:"fas fa-check"});l.appendChild(u);const f=document.createElement("span");if(f.textContent=n.title,d.append(l,f),"project"===s){const t=e("span",{class:"due-date"});d.appendChild(t),on(n,t)}else{const t=e("p",{class:"project-name"});t.append(e("i",{class:"fas fa-square"}),i.title),c.appendChild(t)}const p=e("div",{class:"task-extension"});c.appendChild(p);const m=document.createElement("p");m.textContent=n.notes;const h=e("div",{class:"task-options"});p.append(m,h);const g=e("div",{class:"flatpickr"});h.appendChild(g);const y=e("button",{type:"button",class:"input-button task-option",title:"toggle","aria-label":"toggle-calendar","data-toggle":""});y.appendChild(e("i",{class:"far fa-calendar-alt"})),g.appendChild(y);const w=e("label",{class:"visuallyhidden"});w.textContent="When",g.appendChild(w);const b=e("input",{type:"text",class:"visuallyhidden",placeholder:"When","data-input":""});w.appendChild(b),function(e,n,a,i){Zt(e,{disableMobile:"true",dateFormat:"M j Y",defaultDate:n.dueDate,minDate:"today",allowInvalidPreload:!0,locale:{firstDayOfWeek:1},appendTo:document.body.querySelector(".fp-container"),wrap:!0,onChange:(e,s)=>{const c=n.dueDate;if(n.dueDate=s,"project"===i){const e=a.querySelector(".due-date");on(n,e),(mt(c)||mt(s))&&o(Mt.findTodayTasks())}else if("today"===i){if(!mt(s)){a.querySelector(".flatpickr")._flatpickr.destroy(),a.remove();const e=Mt.findTodayTasks();r(e),o(e)}}else"upcoming"===i&&(mt(s)&&o(Mt.findTodayTasks()),t(tn))}})}(g,n,c,s);const v=e("button",{type:"button",class:"task-option","aria-label":"set-priority"});n.priority&&v.classList.add("active"),v.appendChild(e("i",{class:"fas fa-flag"})),h.appendChild(v);const C=e("button",{type:"button",class:"task-option","aria-label":"edit-task"});C.appendChild(e("i",{class:"fas fa-edit"})),h.appendChild(C);const D=e("button",{type:"button",class:"task-option","aria-label":"delete-task"});return D.appendChild(e("i",{class:"fas fa-trash-alt"})),h.appendChild(D),c.addEventListener("click",rn),c.addEventListener("keydown",rn),u.addEventListener("animationend",(()=>u.style["animation-name"]="none")),l.addEventListener("click",(e=>{e.stopPropagation(),function(e,t,n,a){if(t.complete=!t.complete,t.complete?(e.classList.add("checked"),e.querySelector(".fa-check").style["animation-name"]="check"):e.classList.remove("checked"),"project"===a)r(n),mt(t.dueDate)&&o(Mt.findTodayTasks());else if("today"===a){const e=Mt.findTodayTasks();r(e),o(e)}o(n)}(c,n,i,s)})),y.addEventListener("click",(e=>e.stopPropagation())),v.addEventListener("click",(e=>function(e,t,n,a){e.stopPropagation(),t.priority=!t.priority,t.priority?(a.classList.add("priority"),n.classList.add("active")):(a.classList.remove("priority"),n.classList.remove("active"))}(e,n,v,c))),C.addEventListener("click",(e=>{e.stopPropagation(),function(e,t,n,r){const i=document.getElementById("edit-task-form");for(i&&i.querySelector(".btn-submit").click(),document.getElementById("edit-task-form")&&i.querySelector(".btn-cancel").click(),n.querySelector(".flatpickr")._flatpickr.destroy();n.firstChild;)n.removeChild(n.firstChild);n.classList.remove("checked","priority"),n.appendChild(cn(r,t,e)),n.classList.add("edit-mode"),document.querySelector(".form-overlay").classList.add("show"),a(n.querySelector(".task-title"))}(n,i,c,s)})),D.addEventListener("click",(e=>{e.stopPropagation(),function(e,t,n,a){const r=nn("Are you sure you want to delete task",e.title);n.appendChild(r),r.addEventListener("click",(i=>{i.stopPropagation(),"delete"===i.target.dataset.click?sn(e,t,n,a):i.target.dataset.click&&r.remove()}))}(n,i,c,s)})),c}function rn(e){this.classList.contains("edit-mode")||e instanceof KeyboardEvent&&"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),"false"===this.getAttribute("aria-expanded")?this.setAttribute("aria-expanded","true"):this.setAttribute("aria-expanded","false"))}function on(e,t){if(t.classList.remove("today","expired"),e.dueDate){const n=pt(e.dueDate);t.textContent=n.date,"Today"===n.date?t.classList.add("today"):n.expired&&t.classList.add("expired")}}function sn(e,n,a,i){if(n.deleteTask(e),o(n),"project"===i)r(n),mt(e.dueDate)&&o(Mt.findTodayTasks());else if("today"===i){const e=Mt.findTodayTasks();r(e),o(e)}else if("upcoming"===i)return t(tn);a.querySelector(".flatpickr")._flatpickr.destroy(),a&&a.remove()}function cn(n,a,i){const s=e("form",{id:i?"edit-task-form":"new-task-form"}),c=e("div",{class:"flex-wrapper"});s.appendChild(c);const d=i&&i.complete?"1":"",l=e("button",{type:"button",value:d,"aria-label":"toggle-complete",class:"btn-check","data-class":"checked"});d&&l.classList.add("checked"),l.appendChild(e("i",{class:"fas fa-check"})),c.appendChild(l);const u=i?"edit-title":"new-title",f=i?i.title:"",p=e("label",{for:u,class:"visuallyhidden"});p.textContent="Task title",c.appendChild(p);const m=e("input",{type:"text",id:u,class:"task-title",required:"",value:f,placeholder:"Task name"});c.appendChild(m);const h=i&&i.priority?"1":"",g=e("button",{type:"button",value:h,"aria-label":"set-priority",class:"task-option","data-class":"active"});h&&g.classList.add("active"),g.appendChild(e("i",{class:"fas fa-flag"})),c.appendChild(g);const y=i?"edit-notes":"new-notes",w=i?i.notes:"",b=e("label",{for:y,class:"visuallyhidden"});b.textContent="Task notes",s.appendChild(b);const v=e("textarea",{class:"task-notes",id:y,placeholder:"Notes",rows:"2"});v.textContent=w,s.appendChild(v);const C=e("div",{class:"form-options"});s.appendChild(C);const D=e("div",{class:"flatpickr"});C.appendChild(D);const k=e("button",{type:"button",title:"toggle","data-toggle":"","aria-label":"toggle-calendar",class:"input-button"});k.appendChild(e("i",{class:"far fa-calendar-alt"})),D.appendChild(k);const M=i?"edit-date":"new-date",T=e("label",{for:M,class:"visuallyhidden"});T.textContent="When",D.appendChild(T);const x=e("input",{type:"text",placeholder:"When","data-input":""});D.appendChild(x);const E=e("button",{type:"button",title:"clear","data-clear":"","aria-label":"clear-date",class:"input-button"});var S,P,L;E.appendChild(e("i",{class:"fas fa-times"})),D.appendChild(E),S=D,P=M,L=i?i.dueDate:"today"===n?"today":null,Zt(S,{disableMobile:"true",altInput:!0,altFormat:"M j Y",dateFormat:"M j Y",minDate:"today",allowInvalidPreload:!0,defaultDate:L,locale:{firstDayOfWeek:1},appendTo:document.querySelector(".fp-container"),wrap:!0,onReady:(e,t,n)=>{n.altInput.setAttribute("id",P)},onChange:(e,t,n)=>{n.altInput.value=pt(t).date}});const N=e("div",{class:"task-project-wrapper"});C.appendChild(N);const O=i?"edit-task-project":"new-task-project",j=e("label",{for:O,class:"visuallyhidden"});j.textContent="Select a project",N.appendChild(j);const Y=e("select",{class:"task-project",id:O});N.appendChild(Y),Mt.list.forEach((t=>{const n=e("option",{value:t.id});n.textContent=t.title,a&&a.id===t.id&&n.setAttribute("selected",""),Y.appendChild(n)}));const I=e("div",{class:"btn-form-wrapper"});s.appendChild(I);const q=e("button",{type:"submit",class:"btn-form btn-submit"});q.textContent="Save",I.appendChild(q);const F=e("button",{type:"button",class:"btn-form btn-cancel"});return F.textContent="Cancel",I.appendChild(F),l.addEventListener("click",ln),g.addEventListener("click",ln),F.addEventListener("click",(()=>function(e,t,n){n?(e.querySelector(".flatpickr")._flatpickr.destroy(),e.parentNode.replaceWith(an(n,t)),document.querySelector(".form-overlay").classList.remove("show")):(dn(),un(e))}(s,a,i))),s.addEventListener("submit",(e=>{e.preventDefault(),i?function(e,n,a,i){const s=n.dueDate,{title:c,notes:d,dueDate:l,priority:u,complete:f}=fn(e);n.title=c,n.notes=d,n.dueDate=l,n.priority=u,n.complete=f;const p=e.querySelector(".task-project").value,m=Mt.list.find((e=>e.id===p));e.querySelector(".flatpickr")._flatpickr.destroy(),"project"===i?(p===a.id?(e.parentNode.replaceWith(an(n,a,"project")),r(a)):(sn(n,a,e.parentNode),m.addTask(n)),o(m),(mt(s)||mt(n.dueDate))&&o(Mt.findTodayTasks())):"today"===i?(p!==a.id&&(sn(n,a),m.addTask(n)),mt(n.dueDate)?(e.parentNode.replaceWith(an(n,m,"today")),r(Mt.findTodayTasks())):e.parentNode.remove(),o(m),o(Mt.findTodayTasks())):"upcoming"===i&&(p!==a.id&&(sn(n,a),m.addTask(n)),o(m),s!==n.dueDate?(mt(n.dueDate)&&o(Mt.findTodayTasks()),t(tn)):e.parentNode.replaceWith(an(n,m,"upcoming"))),document.querySelector(".form-overlay").classList.remove("show")}(s,i,a,n):function(e,n,a){const i=fn(n),s=n.querySelector(".task-project").value,c=Mt.list.find((e=>e.id===s));c.addTask(i),o(c);const d=document.querySelector(".task-list");"today"===e&&mt(i.dueDate)?(d.appendChild(an(i,c,"today")),r(Mt.findTodayTasks())):"project"===e&&s===a.id?(d.appendChild(an(i,a,"project")),r(a)):"upcoming"===e&&ht(i.dueDate)&&t(tn),mt(i.dueDate)&&o(Mt.findTodayTasks()),"upcoming"!==e&&(dn(),un(n))}(n,s,a)})),s}function dn(){const e=document.getElementById("task-form-wrapper");e.classList.contains("show-form")?(e.classList.remove("show-form","edit-mode"),document.querySelector(".form-overlay").classList.remove("show")):(e.classList.add("show-form","edit-mode"),a(e.querySelector(".task-title")),document.querySelector(".form-overlay").classList.add("show"))}function ln(){this.value?(this.value="",this.classList.remove(this.dataset.class)):(this.value="1",this.classList.add(this.dataset.class))}function un(e){const t=e.querySelector(".task-option"),n=e.querySelector(".btn-check");t.value&&ln.apply(t),n.value&&ln.apply(n),e.reset()}function fn(e){return t=e.querySelector(".task-title").value,n=e.querySelector(".task-notes").value,a=e.querySelector(".flatpickr-input").value,r=e.querySelector(".task-option").value,i=e.querySelector(".btn-check").value,{title:t,notes:n,dueDate:a,priority:!!r,complete:!!i};var t,n,a,r,i}const pn=function(){const t=Mt.findTodayTasks(),n=document.createElement("main"),a=e("header",{id:"header-today"}),i=document.createElement("h3");i.append(e("i",{class:"fas fa-calendar-day"}),"Today");const o=document.createElement("p");o.textContent=se(Date.now(),"EEE, MMM d"),a.append(i,o),n.appendChild(a);const s=e("progress",{max:"100"});r(t,s),n.appendChild(s);const c=e("ul",{class:"task-list"});n.appendChild(c),t.tasks.forEach((e=>{const t=Mt.list.find((t=>t.id===e.id));c.appendChild(an(e.task,t,"today"))}));const d=e("div",{id:"task-form-wrapper"});n.appendChild(d),d.appendChild(cn("today"));const l=e("button",{type:"button",class:"btn-menu btn-add"});return l.textContent=" New task",d.appendChild(l),n.appendChild(en()),l.addEventListener("click",dn),n};function mn(t){const n=document.createElement("main");n.appendChild(hn(t));const a=e("progress",{max:"100"});r(t,a),n.appendChild(a);const i=e("ul",{class:"task-list"});n.appendChild(i),t.tasks.forEach((e=>i.appendChild(an(e,t,"project"))));const o=e("div",{id:"task-form-wrapper"});n.appendChild(o),o.appendChild(cn("project",t));const s=e("button",{type:"button",class:"btn-menu btn-add"});return s.textContent=" New task",o.appendChild(s),n.appendChild(en()),s.addEventListener("click",dn),n}function hn(n){const r=e("header",{id:"project-info"}),s=e("div",{class:"flex-wrapper"}),c=document.createElement("h3");"inbox"===n.id?c.append(e("i",{class:"fas fa-inbox"}),n.title):c.textContent=n.title;const d=e("button",{type:"button","aria-label":"show-options",class:"btn-options"});if(d.appendChild(e("i",{class:"fas fa-ellipsis-h"})),s.append(c,d),r.appendChild(s),n.description){const t=e("p",{class:"description"});t.textContent=n.description,r.appendChild(t)}return d.addEventListener("click",(()=>function(n,r){const s=e("div",{id:"popup-wrapper"}),c=e("ul",{id:"project-options"});if(s.appendChild(c),"inbox"!==r.id){const t=document.createElement("li");c.appendChild(t);const n=e("button",{type:"button",class:"btn-proj-option"});n.append(e("i",{class:"fas fa-edit"}),"Edit project"),t.appendChild(n),n.addEventListener("click",(()=>function(t){const n=e("form",{id:"edit-project",class:"edit-mode"}),r=e("label",{for:"project-title",class:"visuallyhidden"});r.textContent="Project name";const i=e("input",{type:"text",id:"project-title",class:"project-title",placeholder:"Project name",value:t.title,required:""}),o=e("label",{for:"project-notes",class:"visuallyhidden"});r.textContent="Project notes";const s=e("textarea",{id:"project-notes",row:"2",placeholder:"Project notes"});s.textContent=t.description||"";const c=e("div",{class:"btn-form-wrapper"}),d=e("button",{type:"submit",class:"btn-form btn-submit"});d.textContent="Save";const l=e("button",{class:"btn-form btn-cancel"});l.textContent="Cancel",c.append(d,l),n.append(r,i,o,s,c);const u=document.getElementById("project-info");u.replaceWith(n),a(i),document.querySelector(".form-overlay").classList.add("show"),n.addEventListener("submit",(e=>function(e,t,n){e.preventDefault(),n.title=t.querySelector("#project-title").value,n.description=t.querySelector("#project-notes").value,document.querySelector(".form-overlay").classList.remove("show"),document.querySelector(`#nav-menu #${n.id} .span-title`).textContent=n.title,t.replaceWith(hn(n))}(e,n,t))),l.addEventListener("click",(()=>function(e,t){e.replaceWith(t),document.querySelector(".form-overlay").classList.remove("show")}(n,u)))}(r)))}const d=document.createElement("li");c.appendChild(d);const l=e("button",{type:"button",class:"btn-proj-option"});if(l.append(e("i",{class:"fas fa-calendar-check"}),"Delete completed tasks"),d.appendChild(l),"inbox"!==r.id){const n=document.createElement("li");c.appendChild(n);const a=e("button",{type:"button",class:"btn-proj-option"});a.append(e("i",{class:"far fa-trash-alt"}),"Delete project"),n.appendChild(a),a.addEventListener("click",(()=>function(e){const n=nn("Are you sure you want to delete project",e.title);document.querySelector("main").appendChild(n),n.addEventListener("click",(a=>{a.stopPropagation(),"delete"===a.target.dataset.click?(Mt.deleteProject(e),document.querySelectorAll("#nav-projects li").forEach((t=>{t.id===e.id&&t.remove()})),o(Mt.findTodayTasks()),t(pn),i(document.querySelector("#today .btn-menu"))):a.target.dataset.click&&n.remove()}))}(r)))}return document.body.appendChild(s),gn(n,c),window.addEventListener("resize",(()=>gn(n,c))),s.addEventListener("click",(()=>s.remove())),l.addEventListener("click",(()=>function(e){const n=nn("Are you sure you want to delete","completed tasks");document.querySelector("main").appendChild(n),n.addEventListener("click",(a=>{a.stopPropagation(),"delete"===a.target.dataset.click?(e.deleteCompleted(),t(mn.bind(null,e)),o(e)):a.target.dataset.click&&n.remove()}))}(r))),s}(d,n))),r}function gn(e,t){const n=e.offsetTop+e.offsetHeight,a=e.offsetLeft+.5*e.offsetWidth-.5*t.offsetWidth;a+t.offsetWidth>window.innerWidth?t.style.cssText=`top: ${n}px; right: 0`:t.style.cssText=`top: ${n}px; left: ${a}px`}const yn=mn;function wn(n,a){if("inbox"===n.id)return;const r=e("li",{id:n.id});a.appendChild(r);const o=e("button",{class:"btn-menu btn-flex",type:"button"});o.appendChild(e("i",{class:"fas fa-square project-icon"})),r.appendChild(o);const s=e("span",{class:"span-title"});s.textContent=n.title;const c=e("span",{class:"task-number"});c.textContent=n.calcActiveTasks(),o.append(s,c),o.addEventListener("click",(()=>{i(o),t(yn.bind(null,n))}))}function bn(e){e.preventDefault();const n=function(e){const t={id:`a${Math.random().toString(36).substr(2,9)}`,title:e,tasks:[]},n=Object.create(Dt);return Object.assign(n,t)}(this.querySelector(".project-title").value);Mt.addProject(n),t(yn.bind(null,n)),Cn(),wn(n,document.getElementById("nav-projects")),i(document.querySelector(`#${n.id} .btn-menu`))}function vn(){document.body.classList.toggle("nav-positioner")}function Cn(){const e=document.getElementById("project-form-wrapper");e.classList.contains("show-form")?(e.classList.remove("show-form"),e.querySelector("form").reset()):(e.classList.add("show-form"),e.querySelector(".project-title").focus())}function Dn(e){e.target===this&&vn()}!function(){const e=localStorage.getItem("projects"),t=(e?JSON.parse(e):Tt).map((e=>{const t=Object.create(Dt);return Object.assign(t,e)}));Mt={list:t,...kt}}(),function(){let e=!1;const t=t=>{e||("pagehide"===t.type&&(e=!0,localStorage.setItem("projects",JSON.stringify(Mt.list))),"visibilitychange"===t.type&&"hidden"===document.visibilityState&&localStorage.setItem("projects",JSON.stringify(Mt.list)))};document.addEventListener("visibilitychange",t),window.addEventListener("pagehide",t)}(),document.body.append(function(){const t=e("header",{id:"app-header"}),n=document.createElement("h1");n.append(e("i",{class:"far fa-check-square"}),"To-do List");const a=e("button",{type:"button",id:"nav-toggler","aria-label":"toggle-menu"});return a.appendChild(e("i",{class:"fas fa-bars"})),t.append(n,a),a.addEventListener("click",vn),t}(),function(){const n=e("div",{id:"nav-wrapper"}),a=e("section",{id:"nav-menu"});n.appendChild(a);const r=e("ul",{id:"nav-standard-items"});a.appendChild(r);const o=Mt.list.find((e=>"inbox"===e.id)),s=e("li",{id:"inbox"});r.appendChild(s);const c=e("button",{class:"btn-menu btn-flex",type:"button"});s.appendChild(c);const d=e("span",{class:"span-title"});d.textContent="Inbox";const l=e("span",{class:"task-number"});l.textContent=o.calcActiveTasks(),c.append(e("i",{class:"fas fa-inbox"}),d,l);const u=e("li",{id:"today"});r.appendChild(u);const f=e("button",{class:"btn-menu btn-flex active-tab",type:"button"});u.appendChild(f);const p=document.createElement("span");p.textContent="Today";const m=e("span",{class:"task-number"});m.textContent=Mt.findTodayTasks().calcActiveTasks(),f.append(e("i",{class:"fas fa-calendar-day"}),p,m);const h=e("li",{id:"upcoming"});r.appendChild(h);const g=e("button",{class:"btn-menu btn-flex",type:"button"});g.append(e("i",{class:"fas fa-calendar-alt"}),"Upcoming"),h.appendChild(g);const y=document.createElement("h2");y.textContent="Projects",a.appendChild(y);const w=e("ul",{id:"nav-projects"});a.appendChild(w),Mt.list.forEach((e=>wn(e,w)));const b=e("div",{id:"project-form-wrapper"});a.appendChild(b);const v=e("form",{id:"project-form"});b.appendChild(v);const C=e("label",{for:"project-title"}),D=e("span",{class:"visuallyhidden"});D.textContent="Project name",C.append(e("i",{class:"fas fa-square project-icon"}),D);const k=e("input",{type:"text",class:"project-title",placeholder:"Project name",required:""}),M=e("button",{type:"submit",class:"task-option","aria-label":"add-new-project"});M.appendChild(e("i",{class:"fas fa-plus"})),v.append(C,k,M);const T=e("button",{class:"btn-menu btn-add",type:"button"});return T.textContent=" Add project",b.appendChild(T),T.addEventListener("click",Cn),v.addEventListener("submit",bn),f.addEventListener("click",(()=>{i(f),t(pn)})),g.addEventListener("click",(()=>{i(g),t(tn)})),c.addEventListener("click",(()=>{i(c),t(yn.bind(null,o))})),n.addEventListener("click",Dn),n}()),t(pn)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,